/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_codegouvfr_react-dsfr_dsfr_dsfr_module_min_js"],{

/***/ "(app-pages-browser)/./node_modules/@codegouvfr/react-dsfr/dsfr/dsfr.module.min.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@codegouvfr/react-dsfr/dsfr/dsfr.module.min.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! DSFR v1.11.2 | SPDX-License-Identifier: MIT | License-Filename: LICENSE.md | restricted use (see terms and conditions) */ const e = new class {\n    create(e) {\n        const t1 = new e;\n        this.modules[t1.type] = t1;\n    }\n    getModule(e) {\n        return this.modules[e];\n    }\n    add(e, t1) {\n        this.modules[e].add(t1);\n    }\n    remove(e, t1) {\n        this.modules[e].remove(t1);\n    }\n    get isActive() {\n        return this._isActive;\n    }\n    set isActive(e) {\n        if (e === this._isActive) return;\n        this._isActive = e;\n        const t1 = Object.keys(this.modules).map((e)=>this.modules[e]);\n        if (e) for (const e of t1)e.activate();\n        else for (const e of t1)e.deactivate();\n    }\n    get isLegacy() {\n        return this._isLegacy;\n    }\n    set isLegacy(e) {\n        e !== this._isLegacy && (this._isLegacy = e);\n    }\n    constructor(){\n        this.modules = {};\n    }\n}, t1 = \"fr\", s = \"dsfr\", i = \"@gouvfr\", n = \"1.11.2\";\nclass r {\n    log() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        const t1 = new a(s);\n        for (const s of e)t1.add(s);\n        this.print(t1);\n    }\n    print(e) {\n        e.setColor(this.color), this.logger.apply(console, e.getMessage());\n    }\n    get color() {\n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? this.dark : this.light;\n    }\n    constructor(e, t1, s, i){\n        switch(this.level = e, this.light = t1, this.dark = s, i){\n            case \"warn\":\n                this.logger = console.warn;\n                break;\n            case \"error\":\n                this.logger = console.error;\n                break;\n            default:\n                this.logger = console.log;\n        }\n    }\n}\nclass a {\n    add(e) {\n        switch(typeof e){\n            case \"object\":\n            case \"function\":\n                this.inputs.push(\"%o \"), this.objects.push(e);\n                break;\n            default:\n                this.inputs.push(\"\".concat(e, \" \"));\n        }\n    }\n    setColor(e) {\n        this.styles.push(\"color:\".concat(e));\n    }\n    getMessage() {\n        return [\n            this.inputs.join(\"\"),\n            this.styles.join(\";\"),\n            ...this.objects\n        ];\n    }\n    constructor(e){\n        this.inputs = [\n            \"%c\"\n        ], this.styles = [\n            \"font-family:Marianne\",\n            \"line-height: 1.5\"\n        ], this.objects = [], e && this.add(\"\".concat(e, \" :\"));\n    }\n}\nconst o = {\n    log: new r(0, \"#616161\", \"#989898\"),\n    debug: new r(1, \"#000091\", \"#8B8BFF\"),\n    info: new r(2, \"#007c3b\", \"#00ed70\"),\n    warn: new r(3, \"#ba4500\", \"#fa5c00\", \"warn\"),\n    error: new r(4, \"#D80600\", \"#FF4641\", \"error\")\n};\nconst h = new class {\n    state() {\n        const t1 = new a;\n        t1.add(e), this.log.print(t1);\n    }\n    tree() {\n        const t1 = e.getModule(\"stage\");\n        if (!t1) return;\n        const s = new a;\n        this._branch(t1.root, 0, s), this.log.print(s);\n    }\n    _branch(e, t1, s) {\n        let i = \"\";\n        if (t1 > 0) {\n            let e = \"\";\n            for(let s = 0; s < t1; s++)e += \"    \";\n            i += e + \"└─ \";\n        }\n        i += \"[\".concat(e.id, \"] \").concat(e.html), s.add(i), s.add({\n            \"@\": e\n        }), s.add(\"\\n\");\n        for (const n of e.children)i += this._branch(n, t1 + 1, s);\n    }\n    constructor(){\n        this.level = 2;\n        for(const e in o){\n            var _this = this;\n            const t1 = o[e];\n            this[e] = function() {\n                for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n                    e[_key] = arguments[_key];\n                }\n                _this.level <= t1.level && t1.log.apply(t1, e);\n            }, this[e].print = t1.print.bind(t1);\n        }\n    }\n}, c = (e)=>{\n    \"loading\" !== document.readyState ? window.requestAnimationFrame(e) : document.addEventListener(\"DOMContentLoaded\", e);\n}, l = {\n    AUTO: \"auto\",\n    MANUAL: \"manual\",\n    RUNTIME: \"runtime\",\n    LOADED: \"loaded\",\n    VUE: \"vue\",\n    ANGULAR: \"angular\",\n    REACT: \"react\"\n};\nconst d = new class {\n    configure() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t1 = arguments.length > 1 ? arguments[1] : void 0, s = arguments.length > 2 ? arguments[2] : void 0;\n        this.startCallback = t1;\n        const i = e.production && (!s || \"false\" !== s.production);\n        switch(!0){\n            case s && !isNaN(s.level):\n                h.level = Number(s.level);\n                break;\n            case s && s.verbose && (\"true\" === s.verbose || 1 === s.verbose):\n                h.level = 0;\n                break;\n            case i:\n                h.level = 999;\n                break;\n            case e.verbose:\n                h.level = 0;\n        }\n        h.info(\"version \".concat(n)), this.mode = e.mode || l.AUTO;\n    }\n    set mode(e) {\n        switch(e){\n            case l.AUTO:\n                this.preventManipulation = !1, t1 = this.starting, c(t1);\n                break;\n            case l.LOADED:\n                this.preventManipulation = !1, c(this.starting);\n                break;\n            case l.RUNTIME:\n                this.preventManipulation = !1, this.start();\n                break;\n            case l.MANUAL:\n                this.preventManipulation = !1;\n                break;\n            case l.VUE:\n            case l.ANGULAR:\n            case l.REACT:\n                this.preventManipulation = !0;\n                break;\n            default:\n                return void h.error(\"Illegal mode\");\n        }\n        var t1;\n        this._mode = e, h.info(\"mode set to \".concat(e));\n    }\n    get mode() {\n        return this._mode;\n    }\n    start() {\n        h.info(\"start\"), this.startCallback();\n    }\n    constructor(){\n        this._mode = l.AUTO, this.isStarted = !1, this.starting = this.start.bind(this), this.preventManipulation = !1;\n    }\n};\nclass u {\n    forEach(e) {\n        this._collection.forEach(e);\n    }\n    map(e) {\n        return this._collection.map(e);\n    }\n    get length() {\n        return this._collection.length;\n    }\n    add(e) {\n        return !(this._collection.indexOf(e) > -1) && (this._collection.push(e), this.onAdd && this.onAdd(), this.onPopulate && 1 === this._collection.length && this.onPopulate(), !0);\n    }\n    remove(e) {\n        const t1 = this._collection.indexOf(e);\n        if (-1 === t1) return !1;\n        this._collection.splice(t1, 1), this.onRemove && this.onRemove(), this.onEmpty && 0 === this._collection.length && this.onEmpty();\n    }\n    execute() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        for (const t1 of this._collection)t1 && t1.apply(null, e);\n    }\n    clear() {\n        this._collection.length = 0;\n    }\n    clone() {\n        const e = new u;\n        return e._collection = this._collection.slice(), e;\n    }\n    get collection() {\n        return this._collection;\n    }\n    constructor(){\n        this._collection = [];\n    }\n}\nclass g extends u {\n    activate() {}\n    deactivate() {}\n    constructor(e){\n        super(), this.type = e, this.isActive = !1;\n    }\n}\nconst p = (e)=>\"\".concat(t1, \"-\").concat(e);\np.selector = (e, t1)=>(void 0 === t1 && (t1 = \".\"), \"\".concat(t1).concat(p(e))), (p.attr = (e)=>\"data-\".concat(p(e))).selector = (e, t1)=>{\n    let s = p.attr(e);\n    return void 0 !== t1 && (s += '=\"'.concat(t1, '\"')), \"[\".concat(s, \"]\");\n}, p.event = (e)=>\"\".concat(s, \".\").concat(e), p.emission = (e, t1)=>\"emission:\".concat(e, \".\").concat(t1);\nconst m = (e, t1)=>Array.prototype.slice.call(e.querySelectorAll(t1)), _ = (e, t1)=>{\n    const s = e.parentElement;\n    return s.matches(t1) ? s : s === document.documentElement ? null : _(s, t1);\n};\nclass b {\n    getInstanceClassNames(e) {\n        const t1 = Object.getPrototypeOf(e);\n        return t1 && \"Instance\" !== t1.instanceClassName ? [\n            ...this.getInstanceClassNames(t1),\n            e.instanceClassName\n        ] : [\n            e.instanceClassName\n        ];\n    }\n    hasInstanceClassName(e) {\n        return this._instanceClassNames.indexOf(e) > -1;\n    }\n    introduce() {\n        this.isIntroduced || (this.isIntroduced = !0, e.getModule(\"stage\").parse(document.documentElement, this));\n    }\n    parse(e, t1) {\n        const s = [];\n        return e.matches && e.matches(this.selector) && s.push(e), !t1 && e.querySelectorAll && e.querySelector(this.selector) && s.push.apply(s, m(e, this.selector)), s;\n    }\n    create(e) {\n        if (!e.node.matches(this.selector)) return;\n        const t1 = new this.InstanceClass;\n        return this.instances.add(t1), t1;\n    }\n    remove(e) {\n        this.instances.remove(e);\n    }\n    dispose() {\n        const e = this.instances.collection;\n        for(let t1 = e.length - 1; t1 > -1; t1--)e[t1]._dispose();\n        this.creator = null;\n    }\n    get instanceClassName() {\n        return this._instanceClassName;\n    }\n    get instanceClassNames() {\n        return this._instanceClassNames;\n    }\n    get property() {\n        return this._property;\n    }\n    get attribute() {\n        return this._attribute;\n    }\n    constructor(e, t1, s){\n        this.selector = e, this.InstanceClass = t1, this.creator = s, this.instances = new u, this.isIntroduced = !1, this._instanceClassName = this.InstanceClass.instanceClassName, this._instanceClassNames = this.getInstanceClassNames(this.InstanceClass), this._property = this._instanceClassName.substring(0, 1).toLowerCase() + this._instanceClassName.substring(1);\n        const i = this._instanceClassName.replace(/[^a-zA-Z0-9]+/g, \"-\").replace(/([A-Z]+)([A-Z][a-z])/g, \"$1-$2\").replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/([0-9])([^0-9])/g, \"$1-$2\").replace(/([^0-9])([0-9])/g, \"$1-$2\").toLowerCase();\n        this._attribute = p.attr(\"js-\".concat(i));\n    }\n}\nclass E extends g {\n    register(t1, s, i) {\n        const n = new b(t1, s, i);\n        return this.add(n), e.isActive && n.introduce(), n;\n    }\n    activate() {\n        for (const e of this.collection)e.introduce();\n    }\n    remove(e) {\n        e.dispose(), super.remove(e);\n    }\n    constructor(){\n        super(\"register\");\n    }\n}\nlet f = 0;\nclass A {\n    get proxy() {\n        const e = this;\n        if (!this._proxy) {\n            this._proxy = {\n                id: this.id,\n                get parent () {\n                    return e.parent ? e.parent.proxy : null;\n                },\n                get children () {\n                    return e.children.map((e)=>e.proxy);\n                }\n            };\n            for (const e of this.instances)this._proxy[e.registration.property] = e.proxy;\n        }\n        return this._proxy;\n    }\n    get html() {\n        if (!this.node || !this.node.outerHTML) return \"\";\n        const e = this.node.outerHTML.indexOf(\">\");\n        return this.node.outerHTML.substring(0, e + 1);\n    }\n    project(e) {\n        -1 === this._projects.indexOf(e) && this._projects.push(e);\n    }\n    populate() {\n        const e = this._projects.slice();\n        this._projects.length = 0;\n        for (const t1 of e)this.create(t1);\n    }\n    create(e) {\n        if (this.hasInstance(e.instanceClassName)) return;\n        h.debug(\"create instance of \".concat(e.instanceClassName, \" on element [\").concat(this.id, \"]\"));\n        const t1 = e.create(this);\n        this.instances.push(t1), t1._config(this, e), this._proxy && (this._proxy[e.property] = t1.proxy);\n    }\n    remove(e) {\n        const t1 = this.instances.indexOf(e);\n        t1 > -1 && this.instances.splice(t1, 1), this._proxy && delete this._proxy[e.registration.property];\n    }\n    get parent() {\n        return this._parent;\n    }\n    get ascendants() {\n        return [\n            this.parent,\n            ...this.parent.ascendants\n        ];\n    }\n    get children() {\n        return this._children;\n    }\n    get descendants() {\n        const e = [\n            ...this._children\n        ];\n        return this._children.forEach((t1)=>e.push(...t1.descendants)), e;\n    }\n    addChild(e, t1) {\n        return this._children.indexOf(e) > -1 ? null : (e._parent = this, !isNaN(t1) && t1 > -1 && t1 < this._children.length ? this._children.splice(t1, 0, e) : this._children.push(e), e);\n    }\n    removeChild(e) {\n        const t1 = this._children.indexOf(e);\n        if (-1 === t1) return null;\n        e._parent = null, this._children.splice(t1, 1);\n    }\n    emit(t1, s) {\n        const i = e.getModule(\"stage\").collection, n = [];\n        for (const e of i)n.push(...e._emit(t1, s));\n        return n;\n    }\n    _emit(e, t1) {\n        const s = [];\n        for (const i of this.instances)s.push(...i._emitter.emit(e, t1));\n        return s;\n    }\n    ascend(e, t1) {\n        return this._parent ? this._parent._ascend(e, t1) : [];\n    }\n    _ascend(e, t1) {\n        const s = [];\n        for (const i of this.instances)s.push(...i._ascent.emit(e, t1));\n        return this._parent && s.push(...this._parent._ascend(e, t1)), s;\n    }\n    descend(e, t1) {\n        const s = [];\n        for (const i of this._children)s.push(...i._descend(e, t1));\n        return s;\n    }\n    _descend(e, t1) {\n        const s = [];\n        for (const i of this.instances)s.push(...i._descent.emit(e, t1));\n        for (const i of this._children)s.push(...i._descend(e, t1));\n        return s;\n    }\n    getInstance(e) {\n        for (const t1 of this.instances)if (t1.registration.hasInstanceClassName(e)) return t1;\n        return null;\n    }\n    hasInstance(e) {\n        return null !== this.getInstance(e);\n    }\n    getDescendantInstances(e, t1, s) {\n        if (!e) return [];\n        const i = [];\n        for (const n of this._children){\n            const r = n.getInstance(e);\n            r && (i.push(r), s) || t1 && n.hasInstance(t1) || !n.children.length || i.push.apply(i, n.getDescendantInstances(e, t1, s));\n        }\n        return i;\n    }\n    getAscendantInstance(e, t1) {\n        if (!e || !this._parent) return null;\n        const s = this._parent.getInstance(e);\n        return s || (t1 && this._parent.hasInstance(t1) ? null : this._parent.getAscendantInstance(e, t1));\n    }\n    dispose() {\n        for(let e = this.instances.length - 1; e >= 0; e--){\n            const t1 = this.instances[e];\n            t1 && t1._dispose();\n        }\n        this.instances.length = 0, e.remove(\"stage\", this), this.parent.removeChild(this), this._children.length = 0, h.debug(\"remove element [\".concat(this.id, \"] \").concat(this.html));\n    }\n    prepare(e) {\n        -1 === this.attributeNames.indexOf(e) && this.attributeNames.push(e);\n    }\n    examine() {\n        const e = this.attributeNames.slice();\n        this.attributeNames.length = 0;\n        for(let t1 = this.instances.length - 1; t1 > -1; t1--)this.instances[t1].examine(e);\n    }\n    constructor(e, t1){\n        t1 ? this.id = t1 : (f++, this.id = f), this.node = e, this.attributeNames = [], this.instances = [], this._children = [], this._parent = null, this._projects = [];\n    }\n}\nconst T = {\n    CLICK: p.emission(\"root\", \"click\"),\n    KEYDOWN: p.emission(\"root\", \"keydown\"),\n    KEYUP: p.emission(\"root\", \"keyup\")\n}, S = {\n    TAB: {\n        id: \"tab\",\n        value: 9\n    },\n    ESCAPE: {\n        id: \"escape\",\n        value: 27\n    },\n    END: {\n        id: \"end\",\n        value: 35\n    },\n    HOME: {\n        id: \"home\",\n        value: 36\n    },\n    LEFT: {\n        id: \"left\",\n        value: 37\n    },\n    UP: {\n        id: \"up\",\n        value: 38\n    },\n    RIGHT: {\n        id: \"right\",\n        value: 39\n    },\n    DOWN: {\n        id: \"down\",\n        value: 40\n    }\n}, v = (e)=>Object.values(S).filter((t1)=>t1.value === e)[0];\nclass y extends A {\n    listen() {\n        document.documentElement.addEventListener(\"click\", this.click.bind(this), {\n            capture: !0\n        }), document.documentElement.addEventListener(\"keydown\", this.keydown.bind(this), {\n            capture: !0\n        }), document.documentElement.addEventListener(\"keyup\", this.keyup.bind(this), {\n            capture: !0\n        });\n    }\n    click(e) {\n        this.emit(T.CLICK, e.target);\n    }\n    keydown(e) {\n        this.emit(T.KEYDOWN, v(e.keyCode));\n    }\n    keyup(e) {\n        this.emit(T.KEYUP, v(e.keyCode));\n    }\n    constructor(){\n        super(document.documentElement, \"root\"), this.node.setAttribute(p.attr(\"js\"), !0), this.listen();\n    }\n}\nclass C extends g {\n    hasElement(e) {\n        for (const t1 of this.collection)if (t1.node === e) return !0;\n        return !1;\n    }\n    getElement(e) {\n        for (const t1 of this.collection)if (t1.node === e) return t1;\n        const t1 = new A(e);\n        return this.add(t1), h.debug(\"add element [\".concat(t1.id, \"] \").concat(t1.html)), t1;\n    }\n    getProxy(e) {\n        if (!this.hasElement(e)) return null;\n        return this.getElement(e).proxy;\n    }\n    add(e) {\n        super.add(e), this.put(e, this.root);\n    }\n    put(e, t1) {\n        let s = 0;\n        for(let i = t1.children.length - 1; i > -1; i--){\n            const n = t1.children[i], r = e.node.compareDocumentPosition(n.node);\n            if (r & Node.DOCUMENT_POSITION_CONTAINS) return void this.put(e, n);\n            if (r & Node.DOCUMENT_POSITION_CONTAINED_BY) t1.removeChild(n), e.addChild(n, 0);\n            else if (r & Node.DOCUMENT_POSITION_PRECEDING) {\n                s = i + 1;\n                break;\n            }\n        }\n        t1.addChild(e, s);\n    }\n    activate() {\n        this.observer.observe(document.documentElement, {\n            childList: !0,\n            subtree: !0,\n            attributes: !0\n        });\n    }\n    deactivate() {\n        this.observer.disconnect();\n    }\n    mutate(e) {\n        const t1 = [];\n        e.forEach((e)=>{\n            switch(e.type){\n                case \"childList\":\n                    e.removedNodes.forEach((e)=>this.dispose(e)), e.addedNodes.forEach((e)=>this.parse(e));\n                    break;\n                case \"attributes\":\n                    if (this.hasElement(e.target)) {\n                        const s = this.getElement(e.target);\n                        s.prepare(e.attributeName), -1 === t1.indexOf(s) && t1.push(s);\n                        for (const e of s.descendants)-1 === t1.indexOf(e) && t1.push(e);\n                    }\n                    -1 === this.modifications.indexOf(e.target) && this.modifications.push(e.target);\n            }\n        }), t1.forEach((e)=>e.examine()), this.modifications.length && !this.willModify && (this.willModify = !0, window.requestAnimationFrame(this.modifying));\n    }\n    modify() {\n        this.willModify = !1;\n        const e = this.modifications.slice();\n        this.modifications.length = 0;\n        for (const t1 of e)document.documentElement.contains(t1) && this.parse(t1);\n    }\n    dispose(e) {\n        const t1 = [];\n        this.forEach((s)=>{\n            e.contains(s.node) && t1.push(s);\n        });\n        for (const e of t1)e.dispose(), this.remove(e);\n    }\n    parse(t1, s, i) {\n        const n = s ? [\n            s\n        ] : e.getModule(\"register\").collection, r = [];\n        for (const e of n){\n            const s = e.parse(t1, i);\n            for (const t1 of s){\n                const s = this.getElement(t1);\n                s.project(e), -1 === r.indexOf(s) && r.push(s);\n            }\n        }\n        for (const e of r)e.populate();\n    }\n    constructor(){\n        super(\"stage\"), this.root = new y, super.add(this.root), this.observer = new MutationObserver(this.mutate.bind(this)), this.modifications = [], this.willModify = !1, this.modifying = this.modify.bind(this);\n    }\n}\nclass N extends g {\n    activate() {\n        window.requestAnimationFrame(this.rendering);\n    }\n    request(e) {\n        this.nexts.add(e);\n    }\n    render() {\n        if (!e.isActive) return;\n        if (window.requestAnimationFrame(this.rendering), this.forEach((e)=>e.render()), !this.nexts.length) return;\n        const t1 = this.nexts.clone();\n        this.nexts.clear(), t1.forEach((e)=>e.next());\n    }\n    constructor(){\n        super(\"render\"), this.rendering = this.render.bind(this), this.nexts = new u;\n    }\n}\nclass D extends g {\n    activate() {\n        this.request();\n    }\n    request() {\n        this.requireResize || (this.requireResize = !0, window.requestAnimationFrame(this.resizing));\n    }\n    resize() {\n        this.requireResize && (this.forEach((e)=>e.resize()), this.requireResize = !1);\n    }\n    constructor(){\n        super(\"resize\"), this.requireResize = !1, this.resizing = this.resize.bind(this);\n        const e = this.request.bind(this);\n        document.fonts && document.fonts.ready.then(e), window.addEventListener(\"resize\", e), window.addEventListener(\"orientationchange\", e);\n    }\n}\nclass w extends g {\n    get isLocked() {\n        return this._isLocked;\n    }\n    lock() {\n        if (!this._isLocked) {\n            this._isLocked = !0, this._scrollY = window.scrollY;\n            const e = window.innerWidth - document.documentElement.clientWidth;\n            document.documentElement.setAttribute(p.attr(\"scrolling\"), \"false\"), document.body.style.top = -this._scrollY + \"px\", this.behavior = getComputedStyle(document.documentElement).getPropertyValue(\"scroll-behavior\"), \"smooth\" === this.behavior && (document.documentElement.style.scrollBehavior = \"auto\"), e > 0 && document.documentElement.style.setProperty(\"--scrollbar-width\", \"\".concat(e, \"px\"));\n        }\n    }\n    unlock() {\n        this._isLocked && (this._isLocked = !1, document.documentElement.removeAttribute(p.attr(\"scrolling\")), document.body.style.top = \"\", window.scrollTo(0, this._scrollY), \"smooth\" === this.behavior && document.documentElement.style.removeProperty(\"scroll-behavior\"), document.documentElement.style.removeProperty(\"--scrollbar-width\"));\n    }\n    move(e) {\n        this._isLocked ? (this._scrollY += e, document.body.style.top = -this._scrollY + \"px\") : window.scrollTo(0, window.scrollY + e);\n    }\n    constructor(){\n        super(\"lock\"), this._isLocked = !1, this._scrollY = 0, this.onPopulate = this.lock.bind(this), this.onEmpty = this.unlock.bind(this);\n    }\n}\nclass L extends g {\n    activate() {\n        window.addEventListener(\"load\", this.loading);\n    }\n    load() {\n        this.forEach((e)=>e.load());\n    }\n    constructor(){\n        super(\"load\"), this.loading = this.load.bind(this);\n    }\n}\nconst R = [\n    \"Marianne\",\n    \"Spectral\"\n];\nclass I extends g {\n    activate() {\n        document.fonts && document.fonts.addEventListener(\"loadingdone\", this.swapping);\n    }\n    swap() {\n        const e = R.filter((e)=>document.fonts.check(\"16px \".concat(e)));\n        this.forEach((t1)=>t1.swapFont(e));\n    }\n    constructor(){\n        super(\"font-swap\"), this.swapping = this.swap.bind(this);\n    }\n}\nclass x extends g {\n    listen() {\n        this._isMoving || (this._isMoving = !0, this.requireMove = !1, document.documentElement.addEventListener(\"mousemove\", this.requesting));\n    }\n    unlisten() {\n        this._isMoving && (this._isMoving = !1, this.requireMove = !1, document.documentElement.removeEventListener(\"mousemove\", this.requesting));\n    }\n    request(e) {\n        this._isMoving && (this.point = {\n            x: e.clientX,\n            y: e.clientY\n        }, this.requireMove || (this.requireMove = !0, window.requestAnimationFrame(this.moving)));\n    }\n    move() {\n        this.requireMove && (this.forEach((e)=>e.mouseMove(this.point)), this.requireMove = !1);\n    }\n    constructor(){\n        super(\"mouse-move\"), this.requireMove = !1, this._isMoving = !1, this.moving = this.move.bind(this), this.requesting = this.request.bind(this), this.onPopulate = this.listen.bind(this), this.onEmpty = this.unlisten.bind(this);\n    }\n}\nclass O extends g {\n    activate() {\n        window.addEventListener(\"hashchange\", this.handling);\n    }\n    deactivate() {\n        window.removeEventListener(\"hashchange\", this.handling);\n    }\n    _sanitize(e) {\n        return \"#\" === e.charAt(0) ? e.substring(1) : e;\n    }\n    set hash(e) {\n        const t1 = this._sanitize(e);\n        this._hash !== t1 && (window.location.hash = t1);\n    }\n    get hash() {\n        return this._hash;\n    }\n    getLocationHash() {\n        const e = window.location.hash;\n        this._hash = this._sanitize(e);\n    }\n    handle(e) {\n        this.getLocationHash(), this.forEach((t1)=>t1.handleHash(this._hash, e));\n    }\n    constructor(){\n        super(\"hash\"), this.handling = this.handle.bind(this), this.getLocationHash();\n    }\n}\nconst P = new class {\n    get isActive() {\n        return e.isActive;\n    }\n    start() {\n        h.debug(\"START\"), e.isActive = !0;\n    }\n    stop() {\n        h.debug(\"STOP\"), e.isActive = !1;\n    }\n    constructor(){\n        e.create(E), e.create(C), e.create(N), e.create(D), e.create(w), e.create(L), e.create(I), e.create(x), e.create(O);\n        const t1 = e.getModule(\"register\");\n        this.register = t1.register.bind(t1);\n    }\n};\nconst k = (e)=>{\n    switch(!0){\n        case e.hover:\n            return \"-hover\";\n        case e.active:\n            return \"-active\";\n        default:\n            return \"\";\n    }\n}, M = new class {\n    getColor(e, t1, s) {\n        let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n        const n = \"--\".concat(e, \"-\").concat(t1, \"-\").concat(s).concat(k(i));\n        return getComputedStyle(document.documentElement).getPropertyValue(n).trim() || null;\n    }\n}, G = (e)=>\".\" === e.charAt(0) ? e.substr(1) : e, $ = (e)=>{\n    switch(!0){\n        case !e.className:\n            return [];\n        case \"string\" == typeof e.className:\n            return e.className.split(\" \");\n        case \"string\" == typeof e.className.baseVal:\n            return e.className.baseVal.split(\" \");\n    }\n    return [];\n}, H = (e, t1, s)=>{\n    t1 = G(t1);\n    const i = $(e), n = i.indexOf(t1);\n    !0 === s ? n > -1 && i.splice(n, 1) : -1 === n && i.push(t1), e.className = i.join(\" \");\n}, U = (e, t1)=>H(e, t1), B = (e, t1)=>H(e, t1, !0), F = (e, t1)=>$(e).indexOf(G(t1)) > -1, W = [\n    '[tabindex]:not([tabindex=\"-1\"])',\n    \"a[href]\",\n    \"button:not([disabled])\",\n    \"input:not([disabled])\",\n    \"select:not([disabled])\",\n    \"textarea:not([disabled])\",\n    \"audio[controls]\",\n    \"video[controls]\",\n    '[contenteditable]:not([contenteditable=\"false\"])',\n    \"details>summary:first-of-type\",\n    \"details\",\n    \"iframe\"\n].join(), q = (e)=>e.querySelectorAll(W);\nlet z = 0;\nconst j = (e)=>{\n    if (!document.getElementById(e)) return e;\n    let t1 = !0;\n    const s = e;\n    for(; t1;)z++, e = \"\".concat(s, \"-\").concat(z), t1 = document.getElementById(e);\n    return e;\n}, V = {\n    addClass: U,\n    hasClass: F,\n    removeClass: B,\n    queryParentSelector: _,\n    querySelectorAllArray: m,\n    queryActions: q,\n    uniqueId: j\n};\nconst K = {\n    DataURISVG: class {\n        get width() {\n            return this._width;\n        }\n        set width(e) {\n            this._width = e;\n        }\n        get height() {\n            return this._height;\n        }\n        set height(e) {\n            this._height = e;\n        }\n        get content() {\n            return this._content;\n        }\n        set content(e) {\n            this._content = e;\n        }\n        getDataURI() {\n            let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n            let t1 = \"<svg xmlns='http://www.w3.org/2000/svg' viewbox='0 0 \".concat(this._width, \" \").concat(this._height, \"' width='\").concat(this._width, \"px' height='\").concat(this._height, \"px'>\").concat(this._content, \"</svg>\");\n            return t1 = t1.replace(/#/gi, \"%23\"), e && (t1 = t1.replace(/</gi, \"%3C\"), t1 = t1.replace(/>/gi, \"%3E\"), t1 = t1.replace(/\"/gi, \"'\"), t1 = t1.replace(/{/gi, \"%7B\"), t1 = t1.replace(/}/gi, \"%7D\")), \"data:image/svg+xml;charset=utf8,\".concat(t1);\n        }\n        constructor(e = 0, t1 = 0){\n            this._width = e, this._height = t1, this._content = \"\";\n        }\n    }\n}, Y = {\n    supportLocalStorage: ()=>{\n        try {\n            return \"localStorage\" in window && null !== window.localStorage;\n        } catch (e) {\n            return !1;\n        }\n    },\n    supportAspectRatio: ()=>!!window.CSS && CSS.supports(\"aspect-ratio: 16 / 9\")\n}, X = {\n    TransitionSelector: {\n        NONE: p.selector(\"transition-none\")\n    }\n}, Q = function(e) {\n    for(var _len = arguments.length, t1 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        t1[_key - 1] = arguments[_key];\n    }\n    return t1.forEach((t1)=>{\n        const s = Object.keys(t1).reduce((e, s)=>(e[s] = Object.getOwnPropertyDescriptor(t1, s), e), {});\n        Object.getOwnPropertySymbols(t1).forEach((e)=>{\n            const i = Object.getOwnPropertyDescriptor(t1, e);\n            i.enumerable && (s[e] = i);\n        }), Object.defineProperties(e, s);\n    }), e;\n}, J = {\n    completeAssign: Q\n}, Z = {}, ee = {};\nObject.defineProperty(ee, \"isLegacy\", {\n    get: ()=>e.isLegacy\n}), ee.setLegacy = ()=>{\n    e.isLegacy = !0;\n}, Z.legacy = ee, Z.dom = V, Z.image = K, Z.support = Y, Z.motion = X, Z.property = J, Z.ns = p, Z.register = P.register, Z.state = e, Z.query = ((e)=>{\n    if (e && e.search) {\n        const e = new URLSearchParams(window.location.search).entries();\n        return Object.fromEntries(e);\n    }\n    return null;\n})(window.location), Object.defineProperty(Z, \"preventManipulation\", {\n    get: ()=>d.preventManipulation\n}), Object.defineProperty(Z, \"stage\", {\n    get: ()=>e.getModule(\"stage\")\n});\nconst te = (t1)=>e.getModule(\"stage\").getProxy(t1);\nte.version = n, te.prefix = t1, te.organisation = i, te.Modes = l, Object.defineProperty(te, \"mode\", {\n    set: (e)=>{\n        d.mode = e;\n    },\n    get: ()=>d.mode\n}), te.internals = Z, te.version = n, te.start = P.start, te.stop = P.stop, te.inspector = h, te.colors = M;\nconst se = window[s];\nte.internals.configuration = se, d.configure(se, te.start, te.internals.query), window[s] = te;\nclass ie {\n    add(e, t1) {\n        if (\"function\" != typeof t1) throw new Error(\"closure must be a function\");\n        this.emissions[e] || (this.emissions[e] = []), this.emissions[e].push(t1);\n    }\n    remove(e, t1) {\n        if (this.emissions[e]) if (t1) {\n            const s = this.emissions[e].indexOf(t1);\n            s > -1 && this.emissions[e].splice(s);\n        } else delete this.emissions[e];\n    }\n    emit(e, t1) {\n        if (!this.emissions[e]) return [];\n        const s = [];\n        for (const i of this.emissions[e])i && s.push(i(t1));\n        return s;\n    }\n    dispose() {\n        this.emissions = null;\n    }\n    constructor(){\n        this.emissions = {};\n    }\n}\nclass ne {\n    test() {\n        return window.matchMedia(\"(min-width: \".concat(this.minWidth, \"em)\")).matches;\n    }\n    constructor(e, t1){\n        this.id = e, this.minWidth = t1;\n    }\n}\nconst re = {\n    XS: new ne(\"xs\", 0),\n    SM: new ne(\"sm\", 36),\n    MD: new ne(\"md\", 48),\n    LG: new ne(\"lg\", 62),\n    XL: new ne(\"xl\", 78)\n};\nclass ae {\n    static get instanceClassName() {\n        return \"Instance\";\n    }\n    _config(e, t1) {\n        this.element = e, this.registration = t1, this.node = e.node, this.id = e.node.id, this.jsAttribute && this.setAttribute(t1.attribute, !0), this.init();\n    }\n    init() {}\n    get proxy() {\n        const e = this;\n        return Q({\n            render: ()=>e.render(),\n            resize: ()=>e.resize()\n        }, {\n            get node () {\n                return this.node;\n            },\n            get isEnabled () {\n                return e.isEnabled;\n            },\n            set isEnabled (t){\n                e.isEnabled = t;\n            }\n        });\n    }\n    log() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        e.unshift(\"\".concat(this.registration.instanceClassName, \" #\").concat(this.id, \" - \")), h.log.apply(h, e);\n    }\n    debug() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        e.unshift(\"\".concat(this.registration.instanceClassName, \" #\").concat(this.id, \" - \")), h.debug.apply(h, e);\n    }\n    info() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        e.unshift(\"\".concat(this.registration.instanceClassName, \" #\").concat(this.id, \" - \")), h.info.apply(h, e);\n    }\n    warn() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        e.unshift(\"\".concat(this.registration.instanceClassName, \" #\").concat(this.id, \" - \")), h.warn.apply(h, e);\n    }\n    error() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        e.unshift(\"\".concat(this.registration.instanceClassName, \" #\").concat(this.id, \" - \")), h.error.apply(h, e);\n    }\n    register(t1, s) {\n        const i = e.getModule(\"register\").register(t1, s, this);\n        this._registrations.push(i);\n    }\n    getRegisteredInstances(e) {\n        for (const t1 of this._registrations)if (t1.hasInstanceClassName(e)) return t1.instances.collection;\n        return [];\n    }\n    dispatch(e, t1, s, i) {\n        const n = new CustomEvent(e, {\n            detail: t1,\n            bubble: !0 === s,\n            cancelable: !0 === i\n        });\n        this.node.dispatchEvent(n);\n    }\n    listen(e, t1, s) {\n        this._listeners[e] || (this._listeners[e] = []);\n        const i = this._listeners[e], n = new he(this.node, e, t1, s);\n        i.push(n), n.listen();\n    }\n    unlisten(e, t1, s) {\n        if (!e) {\n            for(const e in this._listeners)this.unlisten(e);\n            return;\n        }\n        const i = this._listeners[e];\n        if (!i) return;\n        if (!t1) return void i.forEach((t1)=>this.unlisten(e, t1.closure));\n        const n = i.filter((e)=>e.closure === t1 && e.matchOptions(s));\n        n.forEach((e)=>e.unlisten()), this._listeners[e] = i.filter((e)=>-1 === n.indexOf(e));\n    }\n    listenClick(e) {\n        this.listen(\"click\", this._handlingClick, e);\n    }\n    unlistenClick(e) {\n        this.unlisten(\"click\", this._handlingClick, e);\n    }\n    handleClick(e) {}\n    set hash(t1) {\n        e.getModule(\"hash\").hash = t1;\n    }\n    get hash() {\n        return e.getModule(\"hash\").hash;\n    }\n    listenHash(t1, s) {\n        if (!this._hashes) return;\n        0 === this._hashes.length && e.add(\"hash\", this);\n        const i = new ce(t1, s);\n        this._hashes = this._hashes.filter((e)=>e.hash !== t1), this._hashes.push(i);\n    }\n    unlistenHash(t1) {\n        this._hashes && (this._hashes = this._hashes.filter((e)=>e.hash !== t1), 0 === this._hashes.length && e.remove(\"hash\", this));\n    }\n    handleHash(e, t1) {\n        if (this._hashes) for (const s of this._hashes)s.handle(e, t1);\n    }\n    listenKey(e, t1) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, n = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"down\";\n        -1 === this._keyListenerTypes.indexOf(n) && (this.listen(\"key\".concat(n), this.handlingKey), this._keyListenerTypes.push(n)), this._keys.push(new oe(n, e, t1, s, i));\n    }\n    unlistenKey(e, t1) {\n        this._keys = this._keys.filter((s)=>s.code !== e || s.closure !== t1), this._keyListenerTypes.forEach((e)=>{\n            this._keys.some((t1)=>t1.type === e) || this.unlisten(\"key\".concat(e), this.handlingKey);\n        });\n    }\n    handleKey(e) {\n        for (const t1 of this._keys)t1.handle(e);\n    }\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    set isEnabled(e) {\n        this._isEnabled = e;\n    }\n    get isRendering() {\n        return this._isRendering;\n    }\n    set isRendering(t1) {\n        this._isRendering !== t1 && (t1 ? e.add(\"render\", this) : e.remove(\"render\", this), this._isRendering = t1);\n    }\n    render() {}\n    request(t1) {\n        this._nexts.push(t1), e.getModule(\"render\").request(this);\n    }\n    next() {\n        const e = this._nexts.slice();\n        this._nexts.length = 0;\n        for (const t1 of e)t1 && t1();\n    }\n    get isResizing() {\n        return this._isResizing;\n    }\n    set isResizing(t1) {\n        this._isResizing !== t1 && (t1 ? (e.add(\"resize\", this), this.resize()) : e.remove(\"resize\", this), this._isResizing = t1);\n    }\n    resize() {}\n    isBreakpoint(e) {\n        return !0 == (\"string\" == typeof e) ? re[e.toUpperCase()].test() : e.test();\n    }\n    get isScrollLocked() {\n        return this._isScrollLocked;\n    }\n    set isScrollLocked(t1) {\n        this._isScrollLocked !== t1 && (t1 ? e.add(\"lock\", this) : e.remove(\"lock\", this), this._isScrollLocked = t1);\n    }\n    get isLoading() {\n        return this._isLoading;\n    }\n    set isLoading(t1) {\n        this._isLoading !== t1 && (t1 ? e.add(\"load\", this) : e.remove(\"load\", this), this._isLoading = t1);\n    }\n    load() {}\n    get isSwappingFont() {\n        return this._isSwappingFont;\n    }\n    set isSwappingFont(t1) {\n        this._isSwappingFont !== t1 && (t1 ? e.add(\"font-swap\", this) : e.remove(\"font-swap\", this), this._isSwappingFont = t1);\n    }\n    swapFont() {}\n    get isMouseMoving() {\n        return this._isMouseMoving;\n    }\n    set isMouseMoving(t1) {\n        this._isMouseMoving !== t1 && (t1 ? e.add(\"mouse-move\", this) : e.remove(\"mouse-move\", this), this._isMouseMoving = t1);\n    }\n    mouseMove(e) {}\n    examine(e) {\n        this.node.matches(this.registration.selector) ? this.mutate(e) : this._dispose();\n    }\n    mutate(e) {}\n    retrieveNodeId(e, t1) {\n        if (e.id) return e.id;\n        const s = j(\"\".concat(this.id, \"-\").concat(t1));\n        return this.warn(\"add id '\".concat(s, \"' to \").concat(t1)), e.setAttribute(\"id\", s), s;\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    _dispose() {\n        this.debug(\"dispose instance of \".concat(this.registration.instanceClassName, \" on element [\").concat(this.element.id, \"]\")), this.removeAttribute(this.registration.attribute), this.unlisten(), e.remove(\"hash\", this), this._hashes = null, this._keys = null, this.isRendering = !1, this.isResizing = !1, this._nexts = null, e.getModule(\"render\").nexts.remove(this), this.isScrollLocked = !1, this.isLoading = !1, this.isSwappingFont = !1, this.isMouseMoving = !1, this._emitter.dispose(), this._emitter = null, this._ascent.dispose(), this._ascent = null, this._descent.dispose(), this._descent = null, this.element.remove(this);\n        for (const t1 of this._registrations)e.remove(\"register\", t1);\n        this._registrations = null, this.registration.remove(this), this._isDisposed = !0, this.dispose();\n    }\n    dispose() {}\n    emit(e, t1) {\n        return this.element.emit(e, t1);\n    }\n    addEmission(e, t1) {\n        this._emitter.add(e, t1);\n    }\n    removeEmission(e, t1) {\n        this._emitter.remove(e, t1);\n    }\n    ascend(e, t1) {\n        return this.element.ascend(e, t1);\n    }\n    addAscent(e, t1) {\n        this._ascent.add(e, t1);\n    }\n    removeAscent(e, t1) {\n        this._ascent.remove(e, t1);\n    }\n    descend(e, t1) {\n        return this.element.descend(e, t1);\n    }\n    addDescent(e, t1) {\n        this._descent.add(e, t1);\n    }\n    removeDescent(e, t1) {\n        this._descent.remove(e, t1);\n    }\n    get style() {\n        return this.node.style;\n    }\n    addClass(e) {\n        U(this.node, e);\n    }\n    removeClass(e) {\n        B(this.node, e);\n    }\n    hasClass(e) {\n        return F(this.node, e);\n    }\n    get classNames() {\n        return $(this.node);\n    }\n    remove() {\n        this.node.parentNode.removeChild(this.node);\n    }\n    setAttribute(e, t1) {\n        this.node.setAttribute(e, t1);\n    }\n    getAttribute(e) {\n        return this.node.getAttribute(e);\n    }\n    hasAttribute(e) {\n        return this.node.hasAttribute(e);\n    }\n    removeAttribute(e) {\n        this.node.removeAttribute(e);\n    }\n    setProperty(e, t1) {\n        this.node.style.setProperty(e, t1);\n    }\n    removeProperty(e) {\n        this.node.style.removeProperty(e);\n    }\n    focus() {\n        this.node.focus();\n    }\n    blur() {\n        this.node.blur();\n    }\n    focusClosest() {\n        const e = this._focusClosest(this.node.parentNode);\n        e && e.focus();\n    }\n    _focusClosest(e) {\n        if (!e) return null;\n        const t1 = [\n            ...q(e)\n        ];\n        if (t1.length <= 1) return this._focusClosest(e.parentNode);\n        {\n            const e = t1.indexOf(this.node);\n            return t1[e + (e < t1.length - 1 ? 1 : -1)];\n        }\n    }\n    get hasFocus() {\n        return this.node === document.activeElement;\n    }\n    scrollIntoView() {\n        const t1 = this.getRect(), s = e.getModule(\"lock\");\n        t1.top < 0 && s.move(t1.top - 50), t1.bottom > window.innerHeight && s.move(t1.bottom - window.innerHeight + 50);\n    }\n    matches(e) {\n        return this.node.matches(e);\n    }\n    querySelector(e) {\n        return this.node.querySelector(e);\n    }\n    querySelectorAll(e) {\n        return m(this.node, e);\n    }\n    queryParentSelector(e) {\n        return _(this.node, e);\n    }\n    getRect() {\n        const e = this.node.getBoundingClientRect();\n        return e.center = e.left + .5 * e.width, e.middle = e.top + .5 * e.height, e;\n    }\n    get isLegacy() {\n        return e.isLegacy;\n    }\n    constructor(e = !0){\n        this.jsAttribute = e, this._isRendering = !1, this._isResizing = !1, this._isScrollLocked = !1, this._isLoading = !1, this._isSwappingFont = !1, this._isEnabled = !0, this._isDisposed = !1, this._listeners = {}, this._handlingClick = this.handleClick.bind(this), this._hashes = [], this._hash = \"\", this._keyListenerTypes = [], this._keys = [], this.handlingKey = this.handleKey.bind(this), this._emitter = new ie, this._ascent = new ie, this._descent = new ie, this._registrations = [], this._nexts = [];\n    }\n}\nclass oe {\n    handle(e) {\n        e.type === this.eventType && e.keyCode === this.keyCode.value && (this.closure(e), this.preventDefault && e.preventDefault(), this.stopPropagation && e.stopPropagation());\n    }\n    constructor(e, t1, s, i, n){\n        this.type = e, this.eventType = \"key\".concat(e), this.keyCode = t1, this.closure = s, this.preventDefault = !0 === i, this.stopPropagation = !0 === n;\n    }\n}\nclass he {\n    get closure() {\n        return this._closure;\n    }\n    listen() {\n        this._node.addEventListener(this._type, this._closure, this._options);\n    }\n    matchOptions() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        switch(!0){\n            case null === e:\n            case \"boolean\" == typeof this._options && \"boolean\" == typeof e && this._options === e:\n                return !0;\n            case Object.keys(this._options).length !== Object.keys(e).length:\n                return !1;\n            case Object.keys(e).every((t1)=>this._options[t1] === e[t1]):\n                return !0;\n        }\n        return !1;\n    }\n    unlisten() {\n        this._node.removeEventListener(this._type, this._closure, this._options);\n    }\n    constructor(e, t1, s, i){\n        this._node = e, this._type = t1, this._closure = s, this._options = i;\n    }\n}\nclass ce {\n    handle(e, t1) {\n        this.hash === e && this.add(t1);\n    }\n    constructor(e, t1){\n        this.hash = e, this.add = t1;\n    }\n}\nconst le = {\n    DISCLOSE: p.event(\"disclose\"),\n    CONCEAL: p.event(\"conceal\")\n}, de = {\n    RESET: p.emission(\"disclosure\", \"reset\"),\n    ADDED: p.emission(\"disclosure\", \"added\"),\n    RETRIEVE: p.emission(\"disclosure\", \"retrieve\"),\n    REMOVED: p.emission(\"disclosure\", \"removed\"),\n    GROUP: p.emission(\"disclosure\", \"group\"),\n    UNGROUP: p.emission(\"disclosure\", \"ungroup\"),\n    SPOTLIGHT: p.emission(\"disclosure\", \"spotlight\")\n};\nclass ue extends ae {\n    static get instanceClassName() {\n        return \"Disclosure\";\n    }\n    init() {\n        this.addDescent(de.RESET, this.reset.bind(this)), this.addDescent(de.GROUP, this.update.bind(this)), this.addDescent(de.UNGROUP, this.update.bind(this)), this.addAscent(de.SPOTLIGHT, this.disclose.bind(this)), this.register('[aria-controls=\"'.concat(this.id, '\"]'), this.DisclosureButtonInstanceClass), this.ascend(de.ADDED), this.listenHash(this.id, this._spotlight.bind(this)), this.update();\n    }\n    get isEnabled() {\n        return super.isEnabled;\n    }\n    set isEnabled(e) {\n        this.isEnabled !== e && (super.isEnabled = e, e ? this.ascend(de.ADDED) : this.ascend(de.REMOVED));\n    }\n    get isPristine() {\n        return this._isPristine;\n    }\n    get proxy() {\n        const e = this, t1 = Object.assign(super.proxy, {\n            disclose: e.disclose.bind(e),\n            focus: e.focus.bind(e)\n        });\n        this.type.canConceal && (t1.conceal = e.conceal.bind(e));\n        return Q(t1, {\n            get buttons () {\n                return e.buttons.map((e)=>e.proxy);\n            },\n            get group () {\n                const t1 = e.group;\n                return t1 ? t1.proxy : null;\n            },\n            get isDisclosed () {\n                return e.isDisclosed;\n            }\n        });\n    }\n    get buttons() {\n        return this.getRegisteredInstances(this.DisclosureButtonInstanceClass.instanceClassName);\n    }\n    update() {\n        this.getGroup(), this.retrievePrimaries();\n    }\n    getGroup() {\n        if (!this.disclosuresGroupInstanceClassName) return void (this._group = null);\n        const e = this.element.getAscendantInstance(this.disclosuresGroupInstanceClassName, this.constructor.instanceClassName);\n        e && e.validate(this) ? this._group = e : this._group = null;\n    }\n    get group() {\n        return this._group;\n    }\n    disclose(e) {\n        return !(!0 === this.isDisclosed || !this.isEnabled) && (this._isPristine = !1, this.isDisclosed = !0, !e && this.group && (this.group.current = this), !0);\n    }\n    conceal(e) {\n        let t1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n        return !1 !== this.isDisclosed && !(!this.type.canConceal && this.group && this.group.current === this) && (this.isDisclosed = !1, !e && this.group && this.group.current === this && (this.group.current = null), t1 || this.focus(), this._isPristine || this.descend(de.RESET), !0);\n    }\n    get isDisclosed() {\n        return this._isDisclosed;\n    }\n    set isDisclosed(e) {\n        if (this._isDisclosed !== e && (this.isEnabled || !0 !== e)) {\n            this.dispatch(e ? le.DISCLOSE : le.CONCEAL, this.type), this._isDisclosed = e, e ? this.addClass(this.modifier) : this.removeClass(this.modifier);\n            for(let t1 = 0; t1 < this.buttons.length; t1++)this.buttons[t1].apply(e);\n        }\n    }\n    get isInitiallyDisclosed() {\n        return this.primaryButtons.some((e)=>e.isInitiallyDisclosed);\n    }\n    hasRetrieved() {\n        return this._hasRetrieved;\n    }\n    reset() {}\n    toggle(e) {\n        if (this.type.canConceal) switch(!0){\n            case !e:\n            case this.isDisclosed:\n                this.conceal(!1, !1);\n                break;\n            default:\n                this.disclose();\n        }\n        else this.disclose();\n    }\n    get buttonHasFocus() {\n        return this.buttons.some((e)=>e.hasFocus);\n    }\n    get hasFocus() {\n        return !!super.hasFocus || !!this.buttonHasFocus || this.querySelectorAll(\":focus\").length > 0;\n    }\n    focus() {\n        this._primaryButtons.length > 0 && this._primaryButtons[0].focus();\n    }\n    get primaryButtons() {\n        return this._primaryButtons;\n    }\n    retrievePrimaries() {\n        this._isRetrievingPrimaries || (this._isRetrievingPrimaries = !0, this.request(this._retrievePrimaries.bind(this)));\n    }\n    _retrievePrimaries() {\n        if (this._isRetrievingPrimaries = !1, this._primaryButtons = this._electPrimaries(this.buttons), !this._hasRetrieved && 0 !== this._primaryButtons.length) {\n            if (this.retrieved(), this._hasRetrieved = !0, this.applyAbility(!0), this.group) this.group.retrieve();\n            else if (this._isPristine && this.isEnabled && !this.group) switch(!0){\n                case this.hash === this.id:\n                    this._spotlight();\n                    break;\n                case this.isInitiallyDisclosed:\n                    this.disclose();\n            }\n        }\n    }\n    retrieved() {}\n    _spotlight() {\n        this.disclose(), this.request(()=>{\n            this.ascend(de.SPOTLIGHT);\n        });\n    }\n    _electPrimaries(e) {\n        return e.filter((e)=>e.canDisclose && !this.node.contains(e.node));\n    }\n    applyAbility() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n        const t1 = !this._primaryButtons.every((e)=>e.isDisabled);\n        this.isEnabled !== t1 && (this.isEnabled = t1, e || (!this.isEnabled && this.isDisclosed && (this.group ? this.ascend(de.REMOVED) : this.type.canConceal && this.conceal()), this.isEnabled && (this.group && this.ascend(de.ADDED), this.hash === this.id && this._spotlight())));\n    }\n    dispose() {\n        this._group = null, this._primaryButtons = null, super.dispose(), this.ascend(de.REMOVED);\n    }\n    constructor(e, t1, s, i){\n        super(), this.type = e, this._selector = t1, this.DisclosureButtonInstanceClass = s, this.disclosuresGroupInstanceClassName = i, this.modifier = this._selector + \"--\" + this.type.id, this._isPristine = !0, this._isRetrievingPrimaries = !1, this._hasRetrieved = !1, this._primaryButtons = [];\n    }\n}\nclass ge extends ae {\n    static get instanceClassName() {\n        return \"DisclosureButton\";\n    }\n    get isPrimary() {\n        return this.registration.creator.primaryButtons.includes(this);\n    }\n    get canDisclose() {\n        return this._canDisclose;\n    }\n    get isDisabled() {\n        return this.type.canDisable && this.hasAttribute(\"disabled\");\n    }\n    init() {\n        this._canDisclose = this.hasAttribute(this.attributeName), this._isInitiallyDisclosed = this.isDisclosed, this._isContained = this.registration.creator.node.contains(this.node), this.controlsId = this.getAttribute(\"aria-controls\"), this.registration.creator.retrievePrimaries(), this.listenClick();\n    }\n    get proxy() {\n        return Object.assign(super.proxy, {\n            focus: this.focus.bind(this)\n        });\n    }\n    handleClick(e) {\n        this.registration.creator && this.registration.creator.toggle(this.canDisclose);\n    }\n    mutate(e) {\n        this._canDisclose = this.hasAttribute(this.attributeName), this.registration.creator.applyAbility(), !this._isApplying && this.isPrimary && e.indexOf(this.attributeName) > -1 && this.registration.creator && (this.isDisclosed ? this.registration.creator.disclose() : this.type.canConceal && this.registration.creator.conceal());\n    }\n    apply(e) {\n        this.canDisclose && (this._isApplying = !0, this.setAttribute(this.attributeName, e), this.request(()=>{\n            this._isApplying = !1;\n        }));\n    }\n    get isDisclosed() {\n        return \"true\" === this.getAttribute(this.attributeName);\n    }\n    get isInitiallyDisclosed() {\n        return this._isInitiallyDisclosed;\n    }\n    focus() {\n        super.focus(), this.scrollIntoView();\n    }\n    measure(e) {\n        const t1 = this.rect;\n        this._dx = e.x - t1.x, this._dy = e.y - t1.y;\n    }\n    get dx() {\n        return this._dx;\n    }\n    get dy() {\n        return this._dy;\n    }\n    constructor(e){\n        super(), this.type = e, this.attributeName = e.ariaState ? \"aria-\" + e.id : p.attr(e.id), this._canDisclose = !1;\n    }\n}\nconst pe = {\n    PREVENT_CONCEAL: p.attr.selector(\"prevent-conceal\"),\n    GROUP: p.attr(\"group\")\n};\nclass me extends ae {\n    static get instanceClassName() {\n        return \"DisclosuresGroup\";\n    }\n    init() {\n        this.addAscent(de.ADDED, this.update.bind(this)), this.addAscent(de.RETRIEVE, this.retrieve.bind(this)), this.addAscent(de.REMOVED, this.update.bind(this)), this.descend(de.GROUP), this._isGrouped = \"false\" !== this.getAttribute(pe.GROUP), this.update();\n    }\n    get proxy() {\n        const e = this, t1 = {\n            set index (t){\n                e.index = t;\n            },\n            get index () {\n                return e.index;\n            },\n            get length () {\n                return e.length;\n            },\n            get current () {\n                const t1 = e.current;\n                return t1 ? t1.proxy : null;\n            },\n            get members () {\n                return e.members.map((e)=>e.proxy);\n            },\n            get hasFocus () {\n                return e.hasFocus;\n            },\n            set isGrouped (t){\n                e.isGrouped = t;\n            },\n            get isGrouped () {\n                return e.isGrouped;\n            }\n        };\n        return Q(super.proxy, t1);\n    }\n    validate(e) {\n        return !0;\n    }\n    getMembers() {\n        const e = this.element.getDescendantInstances(this.disclosureInstanceClassName, this.constructor.instanceClassName, !0);\n        this._members = e.filter(this.validate.bind(this)).filter((e)=>e.isEnabled);\n        e.filter((e)=>!this._members.includes(e)).forEach((e)=>e.conceal());\n    }\n    retrieve() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n        this._isRetrieving || this._hasRetrieved && !e || (this._isRetrieving = !0, this.request(this._retrieve.bind(this)));\n    }\n    _retrieve() {\n        if (this.getMembers(), this._isRetrieving = !1, this._hasRetrieved = !0, this.hash) for(let e = 0; e < this.length; e++){\n            const t1 = this.members[e];\n            if (this.hash === t1.id) return this.index = e, this.request(()=>{\n                this.ascend(de.SPOTLIGHT);\n            }), e;\n        }\n        for(let e = 0; e < this.length; e++){\n            if (this.members[e].isInitiallyDisclosed) return this.index = e, e;\n        }\n        return this.getIndex();\n    }\n    update() {\n        this.getMembers(), this._hasRetrieved && this.getIndex();\n    }\n    get members() {\n        return this._members;\n    }\n    get length() {\n        return this.members ? this.members.length : 0;\n    }\n    getIndex() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : -1;\n        this._index = void 0;\n        let t1 = e;\n        for(let e = 0; e < this.length; e++)if (this.members[e].isDisclosed) {\n            t1 = e;\n            break;\n        }\n        return this.index = t1, t1;\n    }\n    get index() {\n        return this._index;\n    }\n    set index(e) {\n        if (!(e < -1 || e >= this.length || e === this._index)) {\n            this._index = e;\n            for(let t1 = 0; t1 < this.length; t1++){\n                const s = this.members[t1];\n                e === t1 ? s.isDisclosed || s.disclose(!0) : !this.isGrouped && this.canUngroup || !s.isDisclosed || s.conceal(!0);\n            }\n            this.apply();\n        }\n    }\n    get current() {\n        return -1 === this._index || isNaN(this._index) ? null : this._members[this._index] || null;\n    }\n    set current(e) {\n        this.index = this.members.indexOf(e);\n    }\n    get hasFocus() {\n        const e = this.current;\n        return !!e && e.hasFocus;\n    }\n    set isGrouped(e) {\n        const t1 = !!e;\n        this._isGrouped !== t1 && (this._isGrouped = t1, this.setAttribute(pe.GROUP, !!e), this.update());\n    }\n    get isGrouped() {\n        return this._isGrouped;\n    }\n    get canUngroup() {\n        return !1;\n    }\n    mutate(e) {\n        e.includes(pe.GROUP) && (this.isGrouped = \"false\" !== this.getAttribute(pe.GROUP));\n    }\n    apply() {}\n    dispose() {\n        super.dispose(), this.descend(de.UNGROUP), this._members = null;\n    }\n    constructor(e, t1){\n        super(t1), this.disclosureInstanceClassName = e, this._members = [], this._index = -1, this._isRetrieving = !1, this._hasRetrieved = !1, this._isGrouped = !0;\n    }\n}\nconst _e = {\n    EXPAND: {\n        id: \"expanded\",\n        ariaState: !0,\n        ariaControls: !0,\n        canConceal: !0,\n        canDisable: !0\n    },\n    SELECT: {\n        id: \"selected\",\n        ariaState: !0,\n        ariaControls: !0,\n        canConceal: !1,\n        canDisable: !0\n    },\n    OPENED: {\n        id: \"opened\",\n        ariaState: !1,\n        ariaControls: !0,\n        canConceal: !0,\n        canDisable: !1\n    }\n};\nclass be extends ge {\n    static get instanceClassName() {\n        return \"CollapseButton\";\n    }\n    constructor(){\n        super(_e.EXPAND);\n    }\n}\nconst Ee = {\n    COLLAPSE: p.selector(\"collapse\"),\n    COLLAPSING: p.selector(\"collapsing\")\n};\nconst fe = {\n    CHANGE: p(\"equisized\")\n};\nconst Ae = {\n    TOGGLE: p.event(\"toggle\")\n};\nconst Te = {\n    INJECT_SVG: \"[\".concat(p.attr(\"inject-svg\"), \"]\")\n};\nconst Se = {\n    ARTWORK_USE: \"\".concat(p.selector(\"artwork\"), \" use\")\n}, ve = {\n    ASSESS_FILE: \"\".concat(p.attr.selector(\"assess-file\")),\n    DETAIL: \"\".concat(p.attr.selector(\"assess-file\"), ' [class$=\"__detail\"], ').concat(p.attr.selector(\"assess-file\"), ' [class*=\"__detail \"]')\n}, ye = {\n    UPDATE: p.emission(\"assess\", \"update\"),\n    ADDED: p.emission(\"assess\", \"added\")\n};\nconst Ce = [\n    \"32x9\",\n    \"16x9\",\n    \"3x2\",\n    \"4x3\",\n    \"1x1\",\n    \"3x4\",\n    \"2x3\"\n], Ne = (e, t1)=>t1.map((t1)=>p.selector(\"\".concat(e, \"--\").concat(t1))).join(\",\"), De = \"\".concat(p.selector(\"responsive-img\"), \", \").concat(Ne(\"responsive-img\", Ce), \", \").concat(p.selector(\"responsive-vid\"), \", \").concat(Ne(\"responsive-vid\", [\n    \"16x9\",\n    \"4x3\",\n    \"1x1\"\n])), we = {\n    RATIO: \"\".concat(p.selector(\"ratio\"), \", \").concat(Ne(\"ratio\", Ce), \", \").concat(De)\n}, Le = window[s];\nconst Re = {\n    TOP: p.selector(\"placement--top\"),\n    RIGHT: p.selector(\"placement--right\"),\n    BOTTOM: p.selector(\"placement--bottom\"),\n    LEFT: p.selector(\"placement--left\")\n}, Ie = {\n    START: p.selector(\"placement--start\"),\n    CENTER: p.selector(\"placement--center\"),\n    END: p.selector(\"placement--end\")\n}, xe = {\n    TOP: \"place_top\",\n    RIGHT: \"place_right\",\n    BOTTOM: \"place_bottom\",\n    LEFT: \"place_left\"\n}, Oe = {\n    START: \"align_start\",\n    CENTER: \"align_center\",\n    END: \"align_end\"\n}, Pe = {\n    AUTO: \"placement_auto\",\n    MANUAL: \"placement_manual\"\n};\nte.core = {\n    Instance: ae,\n    Breakpoints: re,\n    KeyCodes: S,\n    Disclosure: ue,\n    DisclosureButton: ge,\n    DisclosuresGroup: me,\n    DisclosureType: _e,\n    DisclosureEvent: le,\n    DisclosureSelector: pe,\n    DisclosureEmission: de,\n    Collapse: class extends ue {\n        static get instanceClassName() {\n            return \"Collapse\";\n        }\n        init() {\n            super.init(), this.listen(\"transitionend\", this.transitionend.bind(this));\n        }\n        transitionend(e) {\n            this.removeClass(Ee.COLLAPSING), this.isDisclosed || (this.isLegacy ? this.style.maxHeight = \"\" : this.style.removeProperty(\"--collapse-max-height\"));\n        }\n        unbound() {\n            this.isLegacy ? this.style.maxHeight = \"none\" : this.style.setProperty(\"--collapse-max-height\", \"none\");\n        }\n        disclose(e) {\n            if (!0 === this.isDisclosed || !this.isEnabled) return !1;\n            this.unbound(), this.request(()=>{\n                this.addClass(Ee.COLLAPSING), this.adjust(), this.request(()=>{\n                    super.disclose(e);\n                });\n            });\n        }\n        conceal(e, t1) {\n            if (!1 === this.isDisclosed) return !1;\n            this.request(()=>{\n                this.addClass(Ee.COLLAPSING), this.adjust(), this.request(()=>{\n                    super.conceal(e, t1);\n                });\n            });\n        }\n        adjust() {\n            this.setProperty(\"--collapser\", \"none\");\n            const e = this.node.offsetHeight;\n            this.setProperty(\"--collapse\", -e + \"px\"), this.setProperty(\"--collapser\", \"\");\n        }\n        reset() {\n            this.isPristine || (this.isDisclosed = !1);\n        }\n        _electPrimaries(e) {\n            const t1 = this.element.parent.instances.map((e)=>e.collapsePrimary).filter((t1)=>void 0 !== t1 && e.indexOf(t1) > -1);\n            if (1 === t1.length) return t1;\n            if (1 === (e = super._electPrimaries(e)).length) return e;\n            const s = e.filter((e)=>e.dy >= 0);\n            if (s.length > 0 && (e = s), 1 === e.length) return e;\n            const i = Math.min(...e.map((e)=>e.dy)), n = e.filter((e)=>e.dy === i);\n            return n.length > 0 && (e = n), 1 === e.length || e.sort((e, t1)=>Math.abs(t1.dx) - Math.abs(e.dx)), e;\n        }\n        constructor(){\n            super(_e.EXPAND, Ee.COLLAPSE, be, \"CollapsesGroup\");\n        }\n    },\n    CollapseButton: be,\n    CollapsesGroup: class extends me {\n        static get instanceClassName() {\n            return \"CollapsesGroup\";\n        }\n        get canUngroup() {\n            return !0;\n        }\n        constructor(){\n            super(\"Collapse\");\n        }\n    },\n    CollapseSelector: Ee,\n    RootSelector: {\n        ROOT: \":root\"\n    },\n    RootEmission: T,\n    Equisized: class extends ae {\n        static get instanceClassName() {\n            return \"Equisized\";\n        }\n        init() {\n            this.ascend(fe.CHANGE);\n        }\n        measure() {\n            return this.isLegacy && (this.style.width = \"auto\"), this.getRect().width;\n        }\n        adjust(e) {\n            this.isLegacy && (this.style.width = \"\".concat(e, \"px\"));\n        }\n        dispose() {\n            this.ascend(fe.CHANGE);\n        }\n    },\n    EquisizedEmission: fe,\n    Toggle: class extends ae {\n        static get instanceClassName() {\n            return \"Toggle\";\n        }\n        init() {\n            this.pressed = \"true\" === this.pressed, this.listenClick();\n        }\n        handleClick() {\n            this.toggle();\n        }\n        toggle() {\n            this.pressed = \"true\" !== this.pressed;\n        }\n        get pressed() {\n            return this.getAttribute(\"aria-pressed\");\n        }\n        set pressed(e) {\n            this.setAttribute(\"aria-pressed\", e ? \"true\" : \"false\"), this.dispatch(Ae.TOGGLE, e);\n        }\n        get proxy() {\n            const e = this, t1 = Object.assign(super.proxy, {\n                toggle: e.toggle.bind(e)\n            });\n            return Q(t1, {\n                get pressed () {\n                    return e.pressed;\n                },\n                set pressed (t){\n                    e.pressed = t;\n                }\n            });\n        }\n    },\n    EquisizedsGroup: class extends ae {\n        static get instanceClassName() {\n            return \"EquisizedsGroup\";\n        }\n        init() {\n            this.isResizing = !0, this.isLoading = !0, this.addAscent(fe.CHANGE, this.resize.bind(this));\n        }\n        load() {\n            this.resize();\n        }\n        resize() {\n            const e = this.element.getDescendantInstances(\"Equisized\");\n            this.isLegacy || this.style.setProperty(\"--equisized-width\", \"auto\");\n            const t1 = Math.max(...e.map((e)=>e.measure()));\n            this.isLegacy ? e.forEach((e)=>e.adjust(t1)) : this.style.setProperty(\"--equisized-width\", \"\".concat(t1, \"px\"));\n        }\n    },\n    InjectSvg: class extends ae {\n        static get instanceClassName() {\n            return \"InjectSvg\";\n        }\n        init() {\n            this.node && (this.img = this.node.querySelector(\"img\")), this.isLegacy || this.replace();\n        }\n        get proxy() {\n            const e = this;\n            return Object.assign(super.proxy, {\n                replace: e.replace.bind(e),\n                restore: e.restore.bind(e)\n            });\n        }\n        fetch() {\n            this.img && (this.imgID = this.img.getAttribute(\"id\"), this.imgClass = this.img.getAttribute(\"class\"), this.imgURL = this.img.getAttribute(\"src\"), fetch(this.imgURL).then((e)=>e.text()).then((e)=>{\n                const t1 = (new DOMParser).parseFromString(e, \"text/html\");\n                this.svg = t1.querySelector(\"svg\"), this.svg && this.replace();\n            }));\n        }\n        replace() {\n            if (!this.svg) return void this.fetch();\n            this.imgID && void 0 !== this.imgID && this.svg.setAttribute(\"id\", this.imgID);\n            let e = this.imgURL.match(/[ \\w-]+\\./)[0];\n            e && (e = e.slice(0, -1), [\n                \"dark\",\n                \"light\",\n                \"system\"\n            ].includes(e) && (this.svg.innerHTML = this.svg.innerHTML.replaceAll('id=\"artwork-', 'id=\"'.concat(e, \"-artwork-\")), this.svg.innerHTML = this.svg.innerHTML.replaceAll('\"#artwork-', '\"#'.concat(e, \"-artwork-\")))), this.imgClass && void 0 !== this.imgClass && this.svg.setAttribute(\"class\", this.imgClass), this.svg.hasAttribute(\"xmlns:a\") && this.svg.removeAttribute(\"xmlns:a\"), this.node.setAttribute(\"data-fr-inject-svg\", !0);\n            var t1, s;\n            t1 = this.svg, s = {\n                \"aria-hidden\": !0,\n                focusable: !1\n            }, Object.keys(s).forEach((e)=>t1.setAttribute(e, s[e])), this.node.replaceChild(this.svg, this.img);\n        }\n        restore() {\n            this.img && this.svg && (this.node.setAttribute(\"data-fr-inject-svg\", !1), this.node.replaceChild(this.img, this.svg));\n        }\n    },\n    InjectSvgSelector: Te,\n    Artwork: class extends ae {\n        static get instanceClassName() {\n            return \"Artwork\";\n        }\n        init() {\n            this.isLegacy && this.replace();\n        }\n        get proxy() {\n            return Object.assign(super.proxy, {\n                replace: this.replace.bind(this)\n            });\n        }\n        fetch() {\n            this.xlink = this.node.getAttribute(\"href\");\n            const e = this.xlink.split(\"#\");\n            this.svgUrl = e[0], this.svgName = e[1];\n            const t1 = new XMLHttpRequest;\n            t1.onload = ()=>{\n                const e = (new DOMParser).parseFromString(t1.responseText, \"text/html\");\n                this.realSvgContent = e.getElementById(this.svgName), this.realSvgContent && (this.realSvgContent.classList.add(this.node.classList), this.replace());\n            }, t1.open(\"GET\", this.svgUrl), t1.send();\n        }\n        replace() {\n            this.realSvgContent ? this.node.parentNode.replaceChild(this.realSvgContent, this.node) : this.fetch();\n        }\n    },\n    ArtworkSelector: Se,\n    AssessFile: class extends ae {\n        static get instanceClassName() {\n            return \"AssessFile\";\n        }\n        init() {\n            this.lang = this.getLang(this.node), this.href = this.getAttribute(\"href\"), this.hreflang = this.getAttribute(\"hreflang\"), this.file = {}, this.gather(), this.addAscent(ye.ADDED, this.update.bind(this)), this.addDescent(ye.ADDED, this.update.bind(this));\n        }\n        getFileLength() {\n            void 0 !== this.href ? fetch(this.href, {\n                method: \"HEAD\",\n                mode: \"cors\"\n            }).then((e)=>{\n                this.length = e.headers.get(\"content-length\") || -1, -1 === this.length && h.warn(\"File size unknown: \" + this.href + '\\nUnable to get HTTP header: \"content-length\"'), this.gather();\n            }) : this.length = -1;\n        }\n        mutate(e) {\n            -1 !== e.indexOf(\"href\") && (this.href = this.getAttribute(\"href\"), this.getFileLength()), -1 !== e.indexOf(\"hreflang\") && (this.hreflang = this.getAttribute(\"hreflang\"), this.gather());\n        }\n        gather() {\n            if (this.isLegacy && (this.length = -1), this.length) {\n                if (this.details = [], this.href) {\n                    const e = this.parseExtension(this.href);\n                    e && this.details.push(e.toUpperCase());\n                }\n                -1 !== this.length && this.details.push(this.bytesToSize(this.length)), this.hreflang && this.details.push(this.getLangDisplayName(this.hreflang)), this.update();\n            } else this.getFileLength();\n        }\n        update() {\n            this.details && (this.descend(ye.UPDATE, this.details), this.ascend(ye.UPDATE, this.details));\n        }\n        getLang(e) {\n            return e.lang ? e.lang : document.documentElement === e ? window.navigator.language : this.getLang(e.parentElement);\n        }\n        parseExtension(e) {\n            return e.match(/\\.(\\w{1,9})(?:$|[?#])/)[0].replace(\".\", \"\");\n        }\n        getLangDisplayName(e) {\n            if (this.isLegacy) return e;\n            const t1 = new Intl.DisplayNames([\n                this.lang\n            ], {\n                type: \"language\"\n            }).of(e);\n            return t1.charAt(0).toUpperCase() + t1.slice(1);\n        }\n        bytesToSize(e) {\n            if (-1 === e) return null;\n            let t1 = [\n                \"octets\",\n                \"ko\",\n                \"Mo\",\n                \"Go\",\n                \"To\"\n            ];\n            \"bytes\" === this.getAttribute(p.attr(\"assess-file\")) && (t1 = [\n                \"bytes\",\n                \"KB\",\n                \"MB\",\n                \"GB\",\n                \"TB\"\n            ]);\n            const s = parseInt(Math.floor(Math.log(e) / Math.log(1e3)), 10);\n            if (0 === s) return \"\".concat(e, \" \").concat(t1[s]);\n            const i = e / 1e3 ** s, n = Math.round(100 * (i + Number.EPSILON)) / 100;\n            return \"\".concat(String(n).replace(\".\", \",\"), \" \").concat(t1[s]);\n        }\n    },\n    AssessDetail: class extends ae {\n        static get instanceClassName() {\n            return \"AssessDetail\";\n        }\n        init() {\n            this.addDescent(ye.UPDATE, this.update.bind(this)), this.ascend(ye.ADDED);\n        }\n        update(e) {\n            this.node.innerHTML = e.join(\" - \");\n        }\n    },\n    AssessEmission: ye,\n    AssessSelector: ve,\n    Ratio: class extends ae {\n        static get instanceClassName() {\n            return \"Ratio\";\n        }\n        init() {\n            if (!Le.internals.support.supportAspectRatio()) {\n                this.ratio = 16 / 9;\n                for(const e in this.classNames)if (this.registration.selector.indexOf(this.classNames[e]) > 0) {\n                    const t1 = this.classNames[e].split(\"ratio-\");\n                    t1[1] && (this.ratio = t1[1].split(\"x\")[0] / t1[1].split(\"x\")[1]);\n                }\n                this.isRendering = !0, this.update();\n            }\n        }\n        render() {\n            this.getRect().width !== this.currentWidth && this.update();\n        }\n        update() {\n            this.currentWidth = this.getRect().width, this.style.height = this.currentWidth / this.ratio + \"px\";\n        }\n    },\n    RatioSelector: we,\n    Placement: class extends ae {\n        static get instanceClassName() {\n            return \"Placement\";\n        }\n        init() {\n            this.isResizing = !0;\n        }\n        get proxy() {\n            const e = this, t1 = Object.assign(super.proxy, {\n                show: e.show.bind(e),\n                hide: e.hide.bind(e)\n            });\n            return Q(t1, {\n                get mode () {\n                    return e.mode;\n                },\n                set mode (t){\n                    e.mode = t;\n                },\n                get place () {\n                    return e.place;\n                },\n                set place (t){\n                    e.place = t;\n                },\n                get align () {\n                    return e.align;\n                },\n                set align (t){\n                    e.align = t;\n                },\n                get isShown () {\n                    return e.isShown;\n                },\n                set isShown (t){\n                    e.isShown = t;\n                }\n            });\n        }\n        get mode() {\n            return this._mode;\n        }\n        set mode(e) {\n            this._mode = e;\n        }\n        get place() {\n            return this._place;\n        }\n        set place(e) {\n            if (this._place !== e) {\n                switch(this._place){\n                    case xe.TOP:\n                        this.removeClass(Re.TOP);\n                        break;\n                    case xe.RIGHT:\n                        this.removeClass(Re.RIGHT);\n                        break;\n                    case xe.BOTTOM:\n                        this.removeClass(Re.BOTTOM);\n                        break;\n                    case xe.LEFT:\n                        this.removeClass(Re.LEFT);\n                }\n                switch(this._place = e, this._place){\n                    case xe.TOP:\n                        this.addClass(Re.TOP);\n                        break;\n                    case xe.RIGHT:\n                        this.addClass(Re.RIGHT);\n                        break;\n                    case xe.BOTTOM:\n                        this.addClass(Re.BOTTOM);\n                        break;\n                    case xe.LEFT:\n                        this.addClass(Re.LEFT);\n                }\n            }\n        }\n        get align() {\n            return this._align;\n        }\n        set align(e) {\n            if (this._align !== e) {\n                switch(this._align){\n                    case Oe.START:\n                        this.removeClass(Ie.START);\n                        break;\n                    case Oe.CENTER:\n                        this.removeClass(Ie.CENTER);\n                        break;\n                    case Oe.END:\n                        this.removeClass(Ie.END);\n                }\n                switch(this._align = e, this._align){\n                    case Oe.START:\n                        this.addClass(Ie.START);\n                        break;\n                    case Oe.CENTER:\n                        this.addClass(Ie.CENTER);\n                        break;\n                    case Oe.END:\n                        this.addClass(Ie.END);\n                }\n            }\n        }\n        show() {\n            this.isShown = !0;\n        }\n        hide() {\n            this.isShown = !1;\n        }\n        get isShown() {\n            return this._isShown;\n        }\n        set isShown(e) {\n            this._isShown !== e && this.isEnabled && (this.isRendering = e, this._isShown = e);\n        }\n        setReferent(e) {\n            this._referent = e;\n        }\n        resize() {\n            this.safeArea = {\n                top: this._safeAreaMargin,\n                right: window.innerWidth - this._safeAreaMargin,\n                bottom: window.innerHeight - this._safeAreaMargin,\n                left: this._safeAreaMargin,\n                center: .5 * window.innerWidth,\n                middle: .5 * window.innerHeight\n            };\n        }\n        render() {\n            if (!this._referent) return;\n            if (this.rect = this.getRect(), this.referentRect = this._referent.getRect(), this.mode === Pe.AUTO) switch(this.place = this.getPlace(), this.place){\n                case xe.TOP:\n                case xe.BOTTOM:\n                    this.align = this.getHorizontalAlign();\n                    break;\n                case xe.LEFT:\n                case xe.RIGHT:\n                    this.align = this.getVerticalAlign();\n            }\n            let e, t1;\n            switch(this.place){\n                case xe.TOP:\n                    t1 = this.referentRect.top - this.rect.height;\n                    break;\n                case xe.RIGHT:\n                    e = this.referentRect.right;\n                    break;\n                case xe.BOTTOM:\n                    t1 = this.referentRect.bottom;\n                    break;\n                case xe.LEFT:\n                    e = this.referentRect.left - this.rect.width;\n            }\n            switch(this.place){\n                case xe.TOP:\n                case xe.BOTTOM:\n                    switch(this.align){\n                        case Oe.CENTER:\n                            e = this.referentRect.center - .5 * this.rect.width;\n                            break;\n                        case Oe.START:\n                            e = this.referentRect.left;\n                            break;\n                        case Oe.END:\n                            e = this.referentRect.right - this.rect.width;\n                    }\n                    break;\n                case xe.RIGHT:\n                case xe.LEFT:\n                    switch(this.align){\n                        case Oe.CENTER:\n                            t1 = this.referentRect.middle - .5 * this.rect.height;\n                            break;\n                        case Oe.START:\n                            t1 = this.referentRect.top;\n                            break;\n                        case Oe.END:\n                            t1 = this.referentRect.bottom - this.rect.height;\n                    }\n            }\n            this._x === e && this._y === t1 || (this._x = e + .5 | 0, this._y = t1 + .5 | 0, this.node.style.transform = \"translate(\".concat(this._x, \"px,\").concat(this._y, \"px)\"));\n        }\n        getPlace() {\n            for (const e of this._places)switch(e){\n                case xe.TOP:\n                    if (this.referentRect.top - this.rect.height > this.safeArea.top) return xe.TOP;\n                    break;\n                case xe.RIGHT:\n                    if (this.referentRect.right + this.rect.width < this.safeArea.right) return xe.RIGHT;\n                    break;\n                case xe.BOTTOM:\n                    if (this.referentRect.bottom + this.rect.height < this.safeArea.bottom) return xe.BOTTOM;\n                    break;\n                case xe.LEFT:\n                    if (this.referentRect.left - this.rect.width > this.safeArea.left) return xe.LEFT;\n            }\n            return this._places[0];\n        }\n        getHorizontalAlign() {\n            for (const e of this._aligns)switch(e){\n                case Oe.CENTER:\n                    if (this.referentRect.center - .5 * this.rect.width > this.safeArea.left && this.referentRect.center + .5 * this.rect.width < this.safeArea.right) return Oe.CENTER;\n                    break;\n                case Oe.START:\n                    if (this.referentRect.left + this.rect.width < this.safeArea.right) return Oe.START;\n                    break;\n                case Oe.END:\n                    if (this.referentRect.right - this.rect.width > this.safeArea.left) return Oe.END;\n            }\n            return this._aligns[0];\n        }\n        getVerticalAlign() {\n            for (const e of this._aligns)switch(e){\n                case Oe.CENTER:\n                    if (this.referentRect.middle - .5 * this.rect.height > this.safeArea.top && this.referentRect.middle + .5 * this.rect.height < this.safeArea.bottom) return Oe.CENTER;\n                    break;\n                case Oe.START:\n                    if (this.referentRect.top + this.rect.height < this.safeArea.bottom) return Oe.START;\n                    break;\n                case Oe.END:\n                    if (this.referentRect.bottom - this.rect.height > this.safeArea.top) return Oe.END;\n            }\n            return this._aligns[0];\n        }\n        dispose() {\n            this._referent = null, super.dispose();\n        }\n        constructor(e = Pe.AUTO, t1 = [\n            xe.BOTTOM,\n            xe.TOP,\n            xe.LEFT,\n            xe.RIGHT\n        ], s = [\n            Oe.CENTER,\n            Oe.START,\n            Oe.END\n        ], i = 16){\n            super(), this._mode = e, this._places = t1, this._aligns = s, this._safeAreaMargin = i, this._isShown = !1;\n        }\n    },\n    PlacementReferent: class extends ae {\n        static get instanceClassName() {\n            return \"PlacementReferent\";\n        }\n        init() {\n            this.registration.creator.setReferent(this), this._placement = this.registration.creator;\n        }\n        get placement() {\n            return this._placement;\n        }\n        get isShown() {\n            return this._isShown;\n        }\n        set isShown(e) {\n            this._isShown !== e && this.isEnabled && (this._isShown = e, e ? this.registration.creator.show() : this.registration.creator.hide());\n        }\n        show() {\n            this.isShown = !0;\n        }\n        hide() {\n            this.isShown = !1;\n        }\n        constructor(){\n            super(), this._isShown = !1;\n        }\n    },\n    PlacementAlign: Oe,\n    PlacementPosition: xe,\n    PlacementMode: Pe\n}, te.internals.register(te.core.CollapseSelector.COLLAPSE, te.core.Collapse), te.internals.register(te.core.InjectSvgSelector.INJECT_SVG, te.core.InjectSvg), te.internals.register(te.core.RatioSelector.RATIO, te.core.Ratio), te.internals.register(te.core.AssessSelector.ASSESS_FILE, te.core.AssessFile), te.internals.register(te.core.AssessSelector.DETAIL, te.core.AssessDetail);\nconst ke = {\n    SYSTEM: \"system\",\n    LIGHT: \"light\",\n    DARK: \"dark\"\n}, Me = {\n    THEME: Le.internals.ns.attr(\"theme\"),\n    SCHEME: Le.internals.ns.attr(\"scheme\"),\n    TRANSITION: Le.internals.ns.attr(\"transition\")\n}, Ge = {\n    LIGHT: \"light\",\n    DARK: \"dark\"\n}, $e = {\n    SCHEME: Le.internals.ns.emission(\"scheme\", \"scheme\"),\n    THEME: Le.internals.ns.emission(\"scheme\", \"theme\"),\n    ASK: Le.internals.ns.emission(\"scheme\", \"ask\")\n}, He = {\n    SCHEME: Le.internals.ns.event(\"scheme\"),\n    THEME: Le.internals.ns.event(\"theme\")\n};\nclass Ue extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Scheme\";\n    }\n    init() {\n        this.changing = this.change.bind(this), this.hasAttribute(Me.TRANSITION) && (this.removeAttribute(Me.TRANSITION), this.request(this.restoreTransition.bind(this)));\n        const e = Le.internals.support.supportLocalStorage() ? localStorage.getItem(\"scheme\") : \"\", t1 = this.getAttribute(Me.SCHEME);\n        switch(e){\n            case ke.DARK:\n            case ke.LIGHT:\n            case ke.SYSTEM:\n                this.scheme = e;\n                break;\n            default:\n                switch(t1){\n                    case ke.DARK:\n                        this.scheme = ke.DARK;\n                        break;\n                    case ke.LIGHT:\n                        this.scheme = ke.LIGHT;\n                        break;\n                    default:\n                        this.scheme = ke.SYSTEM;\n                }\n        }\n        this.addAscent($e.ASK, this.ask.bind(this)), this.addAscent($e.SCHEME, this.apply.bind(this));\n    }\n    get proxy() {\n        const e = this, t1 = {\n            get scheme () {\n                return e.scheme;\n            },\n            set scheme (t){\n                e.scheme = t;\n            }\n        };\n        return Le.internals.property.completeAssign(super.proxy, t1);\n    }\n    restoreTransition() {\n        this.setAttribute(Me.TRANSITION, \"\");\n    }\n    ask() {\n        this.descend($e.SCHEME, this.scheme);\n    }\n    apply(e) {\n        this.scheme = e;\n    }\n    get scheme() {\n        return this._scheme;\n    }\n    set scheme(e) {\n        if (this._scheme !== e) {\n            switch(this._scheme = e, e){\n                case ke.SYSTEM:\n                    this.listenPreferences();\n                    break;\n                case ke.DARK:\n                    this.unlistenPreferences(), this.theme = Ge.DARK;\n                    break;\n                case ke.LIGHT:\n                    this.unlistenPreferences(), this.theme = Ge.LIGHT;\n                    break;\n                default:\n                    return void (this.scheme = ke.SYSTEM);\n            }\n            this.descend($e.SCHEME, e), Le.internals.support.supportLocalStorage() && localStorage.setItem(\"scheme\", e), this.setAttribute(Me.SCHEME, e), this.dispatch(He.SCHEME, {\n                scheme: this._scheme\n            });\n        }\n    }\n    get theme() {\n        return this._theme;\n    }\n    set theme(e) {\n        if (this._theme !== e) switch(e){\n            case Ge.LIGHT:\n            case Ge.DARK:\n                this._theme = e, this.setAttribute(Me.THEME, e), this.descend($e.THEME, e), this.dispatch(He.THEME, {\n                    theme: this._theme\n                }), document.documentElement.style.colorScheme = e === Ge.DARK ? \"dark\" : \"\";\n        }\n    }\n    listenPreferences() {\n        this.isListening || (this.isListening = !0, this.mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\"), this.mediaQuery.addEventListener && this.mediaQuery.addEventListener(\"change\", this.changing), this.change());\n    }\n    unlistenPreferences() {\n        this.isListening && (this.isListening = !1, this.mediaQuery.removeEventListener(\"change\", this.changing), this.mediaQuery = null);\n    }\n    change() {\n        this.isListening && (this.theme = this.mediaQuery.matches ? Ge.DARK : Ge.LIGHT);\n    }\n    mutate(e) {\n        e.indexOf(Me.SCHEME) > -1 && (this.scheme = this.getAttribute(Me.SCHEME)), e.indexOf(Me.THEME) > -1 && (this.theme = this.getAttribute(Me.THEME));\n    }\n    dispose() {\n        this.unlistenPreferences();\n    }\n    constructor(){\n        super(!1);\n    }\n}\nconst Be = {\n    SCHEME: \":root\".concat(Le.internals.ns.attr.selector(\"theme\"), \", :root\").concat(Le.internals.ns.attr.selector(\"scheme\")),\n    SWITCH_THEME: Le.internals.ns.selector(\"switch-theme\"),\n    RADIO_BUTTONS: 'input[name=\"'.concat(Le.internals.ns(\"radios-theme\"), '\"]')\n};\nLe.scheme = {\n    Scheme: Ue,\n    SchemeValue: ke,\n    SchemeSelector: Be,\n    SchemeEmission: $e,\n    SchemeTheme: Ge,\n    SchemeEvent: He\n}, Le.internals.register(Le.scheme.SchemeSelector.SCHEME, Le.scheme.Scheme);\nconst Fe = Le.internals.ns.selector(\"accordion\"), We = Le.internals.ns.selector(\"collapse\"), qe = {\n    GROUP: Le.internals.ns.selector(\"accordions-group\"),\n    ACCORDION: Fe,\n    COLLAPSE: \"\".concat(Fe, \" > \").concat(We, \", \").concat(Fe, \" > *:not(\").concat(Fe, \"):not(\").concat(We, \") > \").concat(We, \", \").concat(Fe, \" > *:not(\").concat(Fe, \"):not(\").concat(We, \") > *:not(\").concat(Fe, \"):not(\").concat(We, \") > \").concat(We),\n    COLLAPSE_LEGACY: \"\".concat(Fe, \" \").concat(We),\n    BUTTON: \"\".concat(Fe, \"__btn\")\n};\nclass ze extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Accordion\";\n    }\n    get collapsePrimary() {\n        return this.element.children.map((e)=>e.getInstance(\"CollapseButton\")).filter((e)=>null !== e && e.hasClass(qe.BUTTON))[0];\n    }\n}\nclass je extends Le.core.CollapsesGroup {\n    static get instanceClassName() {\n        return \"AccordionsGroup\";\n    }\n    validate(e) {\n        const t1 = e.node.matches(Le.internals.legacy.isLegacy ? qe.COLLAPSE_LEGACY : qe.COLLAPSE);\n        return super.validate(e) && t1;\n    }\n}\nLe.accordion = {\n    Accordion: ze,\n    AccordionSelector: qe,\n    AccordionsGroup: je\n}, Le.internals.register(Le.accordion.AccordionSelector.GROUP, Le.accordion.AccordionsGroup), Le.internals.register(Le.accordion.AccordionSelector.ACCORDION, Le.accordion.Accordion);\nconst Ve = {\n    EQUISIZED_BUTTON: \"\".concat(Le.internals.ns.selector(\"btns-group--equisized\"), \" \").concat(Le.internals.ns.selector(\"btn\")),\n    EQUISIZED_GROUP: Le.internals.ns.selector(\"btns-group--equisized\")\n};\nLe.button = {\n    ButtonSelector: Ve\n}, Le.internals.register(Le.button.ButtonSelector.EQUISIZED_BUTTON, Le.core.Equisized), Le.internals.register(Le.button.ButtonSelector.EQUISIZED_GROUP, Le.core.EquisizedsGroup);\nclass Ke extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"CardDownload\";\n    }\n    init() {\n        this.addAscent(Le.core.AssessEmission.UPDATE, (e)=>{\n            this.descend(Le.core.AssessEmission.UPDATE, e);\n        }), this.addAscent(Le.core.AssessEmission.ADDED, ()=>{\n            this.descend(Le.core.AssessEmission.ADDED);\n        });\n    }\n}\nconst Ye = {\n    DOWNLOAD: Le.internals.ns.selector(\"card--download\"),\n    DOWNLOAD_DETAIL: \"\".concat(Le.internals.ns.selector(\"card--download\"), \" \").concat(Le.internals.ns.selector(\"card__end\"), \" \").concat(Le.internals.ns.selector(\"card__detail\"))\n};\nLe.card = {\n    CardSelector: Ye,\n    CardDownload: Ke\n}, Le.internals.register(Le.card.CardSelector.DOWNLOAD, Le.card.CardDownload), Le.internals.register(Le.card.CardSelector.DOWNLOAD_DETAIL, Le.core.AssessDetail);\nconst Xe = {\n    SEGMENTED: Le.internals.ns.selector(\"segmented\"),\n    SEGMENTED_ELEMENTS: Le.internals.ns.selector(\"segmented__elements\"),\n    SEGMENTED_ELEMENT: Le.internals.ns.selector(\"segmented__element input\"),\n    SEGMENTED_LEGEND: Le.internals.ns.selector(\"segmented__legend\")\n}, Qe = {\n    ADDED: Le.internals.ns.emission(\"segmented\", \"added\"),\n    REMOVED: Le.internals.ns.emission(\"segmented\", \"removed\")\n};\nclass Je extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Segmented\";\n    }\n    init() {\n        this.elements = this.node.querySelector(Xe.SEGMENTED_ELEMENTS), this.legend = this.node.querySelector(Xe.SEGMENTED_LEGEND), this.addAscent(Qe.ADDED, this.resize.bind(this)), this.addAscent(Qe.REMOVED, this.resize.bind(this)), this._isLegendInline = this.legend && this.legend.classList.contains(\"\".concat(Le.prefix, \"-segmented__legend--inline\")), this.isResizing = !0;\n    }\n    resize() {\n        const e = \"\".concat(Le.prefix, \"-segmented--vertical\"), t1 = \"\".concat(Le.prefix, \"-segmented__legend--inline\");\n        this.removeClass(e), this._isLegendInline && (this.legend.classList.add(t1), (this.node.offsetWidth > this.node.parentNode.offsetWidth || this.elements.scrollWidth + this.legend.offsetWidth + 16 > this.node.parentNode.offsetWidth) && this.legend.classList.remove(t1)), this.elements.offsetWidth > this.node.parentNode.offsetWidth || this.elements.scrollWidth > this.node.parentNode.offsetWidth ? this.addClass(e) : this.removeClass(e);\n    }\n}\nclass Ze extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"SegmentedElement\";\n    }\n    init() {\n        this.ascend(Qe.ADDED);\n    }\n    dispose() {\n        this.ascend(Qe.REMOVED);\n    }\n}\nLe.segmented = {\n    SegmentedSelector: Xe,\n    SegmentedEmission: Qe,\n    SegmentedElement: Ze,\n    Segmented: Je\n}, Le.internals.register(Le.segmented.SegmentedSelector.SEGMENTED, Le.segmented.Segmented), Le.internals.register(Le.segmented.SegmentedSelector.SEGMENTED_ELEMENT, Le.segmented.SegmentedElement);\nconst et = {\n    BREADCRUMB: Le.internals.ns.selector(\"breadcrumb\"),\n    BUTTON: Le.internals.ns.selector(\"breadcrumb__button\")\n};\nclass tt extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Breadcrumb\";\n    }\n    init() {\n        this.getCollapse(), this.isResizing = !0;\n    }\n    get proxy() {\n        const e = this;\n        return Object.assign(super.proxy, {\n            focus: e.focus.bind(e),\n            disclose: e.collapse.disclose.bind(e.collapse)\n        });\n    }\n    getCollapse() {\n        const e = this.collapse;\n        e ? e.listen(Le.core.DisclosureEvent.DISCLOSE, this.focusing) : this.addAscent(Le.core.DisclosureEmission.ADDED, this.getCollapse.bind(this));\n    }\n    resize() {\n        const e = this.collapse, t1 = this.links;\n        e && t1.length && (this.isBreakpoint(Le.core.Breakpoints.MD) ? e.buttonHasFocus && t1[0].focus() : t1.indexOf(document.activeElement) > -1 && e.focus());\n    }\n    get links() {\n        return [\n            ...this.querySelectorAll(\"a[href]\")\n        ];\n    }\n    get collapse() {\n        return this.element.getDescendantInstances(Le.core.Collapse.instanceClassName, null, !0)[0];\n    }\n    focus() {\n        this.count = 0, this._focus();\n    }\n    _focus() {\n        const e = this.links[0];\n        e && (e.focus(), this.request(this.verify.bind(this)));\n    }\n    verify() {\n        if (this.count++, this.count > 100) return;\n        const e = this.links[0];\n        e && document.activeElement !== e && this._focus();\n    }\n    get collapsePrimary() {\n        return this.element.children.map((e)=>e.getInstance(\"CollapseButton\")).filter((e)=>null !== e && e.hasClass(et.BUTTON))[0];\n    }\n    constructor(){\n        super(), this.count = 0, this.focusing = this.focus.bind(this);\n    }\n}\nLe.breadcrumb = {\n    BreadcrumbSelector: et,\n    Breadcrumb: tt\n}, Le.internals.register(Le.breadcrumb.BreadcrumbSelector.BREADCRUMB, Le.breadcrumb.Breadcrumb);\nconst st = {\n    TOOLTIP: Le.internals.ns.selector(\"tooltip\"),\n    SHOWN: Le.internals.ns.selector(\"tooltip--shown\"),\n    BUTTON: Le.internals.ns.selector(\"btn--tooltip\")\n}, it = 1, nt = 2;\nclass rt extends Le.core.PlacementReferent {\n    static get instanceClassName() {\n        return \"TooltipReferent\";\n    }\n    init() {\n        if (super.init(), this.listen(\"focusin\", this.focusIn.bind(this)), this.listen(\"focusout\", this.focusOut.bind(this)), !this.matches(st.BUTTON)) {\n            const e = this.mouseover.bind(this);\n            this.listen(\"mouseover\", e), this.placement.listen(\"mouseover\", e);\n            const t1 = this.mouseout.bind(this);\n            this.listen(\"mouseout\", t1), this.placement.listen(\"mouseout\", t1);\n        }\n        this.addEmission(Le.core.RootEmission.KEYDOWN, this._keydown.bind(this)), this.listen(\"click\", this._click.bind(this)), this.addEmission(Le.core.RootEmission.CLICK, this._clickOut.bind(this));\n    }\n    _click() {\n        this.focus();\n    }\n    _clickOut(e) {\n        this.node.contains(e) || this.blur();\n    }\n    _keydown(e) {\n        if (e === Le.core.KeyCodes.ESCAPE) this.blur(), this.close();\n    }\n    close() {\n        this.state = 0;\n    }\n    get state() {\n        return this._state;\n    }\n    set state(e) {\n        this._state !== e && (this.isShown = e > 0, this._state = e);\n    }\n    focusIn() {\n        this.state |= it;\n    }\n    focusOut() {\n        this.state &= ~it;\n    }\n    mouseover() {\n        this.state |= nt;\n    }\n    mouseout() {\n        this.state &= ~nt;\n    }\n    constructor(){\n        super(), this._state = 0;\n    }\n}\nconst at = {\n    SHOW: p.event(\"show\"),\n    HIDE: p.event(\"hide\")\n}, ot = \"hidden\", ht = \"shown\", ct = \"hiding\";\nclass lt extends Le.core.Placement {\n    static get instanceClassName() {\n        return \"Tooltip\";\n    }\n    init() {\n        super.init(), this.register('[aria-describedby=\"'.concat(this.id, '\"]'), rt), this.listen(\"transitionend\", this.transitionEnd.bind(this));\n    }\n    transitionEnd() {\n        this._state === ct && (this._state = ot, this.isShown = !1);\n    }\n    get isShown() {\n        return super.isShown;\n    }\n    set isShown(e) {\n        if (this.isEnabled) switch(!0){\n            case e:\n                this._state = ht, this.addClass(st.SHOWN), this.dispatch(at.SHOW), super.isShown = !0;\n                break;\n            case this.isShown && !e && this._state === ht:\n                this._state = ct, this.removeClass(st.SHOWN);\n                break;\n            case this.isShown && !e && this._state === ot:\n                this.dispatch(at.HIDE), super.isShown = !1;\n        }\n    }\n    render() {\n        super.render();\n        let e = this.referentRect.center - this.rect.center;\n        const t1 = .5 * this.rect.width - 8;\n        e < -t1 && (e = -t1), e > t1 && (e = t1), this.setProperty(\"--arrow-x\", \"\".concat(e.toFixed(2), \"px\"));\n    }\n    constructor(){\n        super(Le.core.PlacementMode.AUTO, [\n            Le.core.PlacementPosition.TOP,\n            Le.core.PlacementPosition.BOTTOM\n        ], [\n            Le.core.PlacementAlign.CENTER,\n            Le.core.PlacementAlign.START,\n            Le.core.PlacementAlign.END\n        ]), this.modifier = \"\", this._state = ot;\n    }\n}\nLe.tooltip = {\n    Tooltip: lt,\n    TooltipSelector: st,\n    TooltipEvent: at\n}, Le.internals.register(Le.tooltip.TooltipSelector.TOOLTIP, Le.tooltip.Tooltip);\nclass dt extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"ToggleInput\";\n    }\n    get isChecked() {\n        return this.node.checked;\n    }\n}\nclass ut extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"ToggleStatusLabel\";\n    }\n    init() {\n        this.register('input[id=\"'.concat(this.getAttribute(\"for\"), '\"]'), dt), this.update(), this.isSwappingFont = !0;\n    }\n    get proxy() {\n        return Object.assign(super.proxy, {\n            update: this.update.bind(this)\n        });\n    }\n    get input() {\n        return this.getRegisteredInstances(\"ToggleInput\")[0];\n    }\n    update() {\n        this.node.style.removeProperty(\"--toggle-status-width\");\n        const e = this.input.isChecked, t1 = getComputedStyle(this.node, \":before\");\n        let s = parseFloat(t1.width);\n        this.input.node.checked = !e;\n        const i = getComputedStyle(this.node, \":before\"), n = parseFloat(i.width);\n        n > s && (s = n), this.input.node.checked = e, this.node.style.setProperty(\"--toggle-status-width\", s / 16 + \"rem\");\n    }\n    swapFont(e) {\n        this.update();\n    }\n}\nconst gt = {\n    STATUS_LABEL: \"\".concat(Le.internals.ns.selector(\"toggle__label\")).concat(Le.internals.ns.attr.selector(\"checked-label\")).concat(Le.internals.ns.attr.selector(\"unchecked-label\"))\n};\nLe.toggle = {\n    ToggleStatusLabel: ut,\n    ToggleSelector: gt\n}, Le.internals.register(Le.toggle.ToggleSelector.STATUS_LABEL, Le.toggle.ToggleStatusLabel);\nconst pt = Le.internals.ns.selector(\"sidemenu__item\"), mt = Le.internals.ns.selector(\"collapse\"), _t = {\n    LIST: Le.internals.ns.selector(\"sidemenu__list\"),\n    COLLAPSE: \"\".concat(pt, \" > \").concat(mt, \", \").concat(pt, \" > *:not(\").concat(pt, \"):not(\").concat(mt, \") > \").concat(mt, \", \").concat(pt, \" > *:not(\").concat(pt, \"):not(\").concat(mt, \") > *:not(\").concat(pt, \"):not(\").concat(mt, \") > \").concat(mt),\n    COLLAPSE_LEGACY: \"\".concat(pt, \" \").concat(mt),\n    ITEM: Le.internals.ns.selector(\"sidemenu__item\"),\n    BUTTON: Le.internals.ns.selector(\"sidemenu__btn\")\n};\nclass bt extends Le.core.CollapsesGroup {\n    static get instanceClassName() {\n        return \"SidemenuList\";\n    }\n    validate(e) {\n        return super.validate(e) && e.node.matches(Le.internals.legacy.isLegacy ? _t.COLLAPSE_LEGACY : _t.COLLAPSE);\n    }\n}\nclass Et extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"SidemenuItem\";\n    }\n    get collapsePrimary() {\n        return this.element.children.map((e)=>e.getInstance(\"CollapseButton\")).filter((e)=>null !== e && e.hasClass(_t.BUTTON))[0];\n    }\n}\nLe.sidemenu = {\n    SidemenuList: bt,\n    SidemenuItem: Et,\n    SidemenuSelector: _t\n}, Le.internals.register(Le.sidemenu.SidemenuSelector.LIST, Le.sidemenu.SidemenuList), Le.internals.register(Le.sidemenu.SidemenuSelector.ITEM, Le.sidemenu.SidemenuItem);\nconst ft = {\n    MODAL: Le.internals.ns.selector(\"modal\"),\n    SCROLL_DIVIDER: Le.internals.ns.selector(\"scroll-divider\"),\n    BODY: Le.internals.ns.selector(\"modal__body\"),\n    TITLE: Le.internals.ns.selector(\"modal__title\")\n};\nclass At extends Le.core.DisclosureButton {\n    static get instanceClassName() {\n        return \"ModalButton\";\n    }\n    constructor(){\n        super(Le.core.DisclosureType.OPENED);\n    }\n}\nconst Tt = {\n    CONCEALING_BACKDROP: Le.internals.ns.attr(\"concealing-backdrop\")\n};\nclass St extends Le.core.Disclosure {\n    static get instanceClassName() {\n        return \"Modal\";\n    }\n    init() {\n        super.init(), this._isDialog = \"DIALOG\" === this.node.tagName, this.isScrolling = !1, this.listenClick(), this.addEmission(Le.core.RootEmission.KEYDOWN, this._keydown.bind(this));\n    }\n    _keydown(e) {\n        if (e === Le.core.KeyCodes.ESCAPE) this._escape();\n    }\n    _escape() {\n        switch(document.activeElement ? document.activeElement.tagName : void 0){\n            case \"INPUT\":\n            case \"LABEL\":\n            case \"TEXTAREA\":\n            case \"SELECT\":\n            case \"AUDIO\":\n            case \"VIDEO\":\n                break;\n            default:\n                this.isDisclosed && (this.conceal(), this.focus());\n        }\n    }\n    retrieved() {\n        this._ensureAccessibleName();\n    }\n    get body() {\n        return this.element.getDescendantInstances(\"ModalBody\", \"Modal\")[0];\n    }\n    handleClick(e) {\n        e.target === this.node && \"false\" !== this.getAttribute(Tt.CONCEALING_BACKDROP) && this.conceal();\n    }\n    disclose(e) {\n        return !!super.disclose(e) && (this.body && this.body.activate(), this.isScrollLocked = !0, this.setAttribute(\"aria-modal\", \"true\"), this.setAttribute(\"open\", \"true\"), this._isDialog || this.activateModal(), !0);\n    }\n    conceal(e, t1) {\n        return !!super.conceal(e, t1) && (this.isScrollLocked = !1, this.removeAttribute(\"aria-modal\"), this.removeAttribute(\"open\"), this.body && this.body.deactivate(), this._isDialog || this.deactivateModal(), !0);\n    }\n    get isDialog() {\n        return this._isDialog;\n    }\n    set isDialog(e) {\n        this._isDialog = e;\n    }\n    activateModal() {\n        this._isActive || (this._isActive = !0, this._hasDialogRole = \"dialog\" === this.getAttribute(\"role\"), this._hasDialogRole || this.setAttribute(\"role\", \"dialog\"));\n    }\n    deactivateModal() {\n        this._isActive && (this._isActive = !1, this._hasDialogRole || this.removeAttribute(\"role\"));\n    }\n    _setAccessibleName(e, t1) {\n        const s = this.retrieveNodeId(e, t1);\n        this.warn(\"add reference to \".concat(t1, \" for accessible name (aria-labelledby)\")), this.setAttribute(\"aria-labelledby\", s);\n    }\n    _ensureAccessibleName() {\n        if (this.hasAttribute(\"aria-labelledby\") || this.hasAttribute(\"aria-label\")) return;\n        this.warn(\"missing accessible name\");\n        const e = this.node.querySelector(ft.TITLE), t1 = this.primaryButtons[0];\n        switch(!0){\n            case null !== e:\n                this._setAccessibleName(e, \"title\");\n                break;\n            case void 0 !== t1:\n                this.warn(\"missing required title, fallback to primary button\"), this._setAccessibleName(t1, \"primary\");\n        }\n    }\n    constructor(){\n        super(Le.core.DisclosureType.OPENED, ft.MODAL, At, \"ModalsGroup\"), this._isActive = !1, this.scrolling = this.resize.bind(this, !1), this.resizing = this.resize.bind(this, !0);\n    }\n}\nconst vt = [\n    '[tabindex=\"0\"]',\n    \"a[href]\",\n    \"button:not([disabled])\",\n    \"input:not([disabled])\",\n    \"select:not([disabled])\",\n    \"textarea:not([disabled])\",\n    \"audio[controls]\",\n    \"video[controls]\",\n    '[contenteditable]:not([contenteditable=\"false\"])',\n    \"details>summary:first-of-type\",\n    \"details\",\n    \"iframe\"\n].join(), yt = [\n    '[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])'\n].join(), Ct = (e, t1)=>{\n    if (!(e instanceof Element)) return !1;\n    const s = window.getComputedStyle(e);\n    if (!s) return !1;\n    if (\"hidden\" === s.visibility) return !1;\n    for(void 0 === t1 && (t1 = e); t1.contains(e);){\n        if (\"none\" === s.display) return !1;\n        e = e.parentElement;\n    }\n    return !0;\n};\nclass Nt {\n    get trapped() {\n        return null !== this.element;\n    }\n    trap(e) {\n        this.trapped && this.untrap(), this.element = e, this.isTrapping = !0, this.wait(), this.onTrap && this.onTrap();\n    }\n    wait() {\n        Ct(this.element) ? this.trapping() : window.requestAnimationFrame(this.waiting);\n    }\n    trapping() {\n        if (!this.isTrapping) return;\n        this.isTrapping = !1;\n        const e = this.focusables;\n        e.length && -1 === e.indexOf(document.activeElement) && e[0].focus(), this.element.setAttribute(\"aria-modal\", !0), window.addEventListener(\"keydown\", this.handling), document.body.addEventListener(\"focus\", this.focusing, !0);\n    }\n    stun(e) {\n        for (const t1 of e.children)t1 !== this.element && (t1.contains(this.element) ? this.stun(t1) : this.stunneds.push(new Dt(t1)));\n    }\n    maintainFocus(e) {\n        if (!this.element.contains(e.target)) {\n            const t1 = this.focusables;\n            if (0 === t1.length) return;\n            const s = t1[0];\n            e.preventDefault(), s.focus();\n        }\n    }\n    handle(e) {\n        if (9 !== e.keyCode) return;\n        const t1 = this.focusables;\n        if (0 === t1.length) return;\n        const s = t1[0], i = t1[t1.length - 1], n = t1.indexOf(document.activeElement);\n        e.shiftKey ? !this.element.contains(document.activeElement) || n < 1 ? (e.preventDefault(), i.focus()) : (document.activeElement.tabIndex > 0 || t1[n - 1].tabIndex > 0) && (e.preventDefault(), t1[n - 1].focus()) : this.element.contains(document.activeElement) && n !== t1.length - 1 && -1 !== n ? document.activeElement.tabIndex > 0 && (e.preventDefault(), t1[n + 1].focus()) : (e.preventDefault(), s.focus());\n    }\n    get focusables() {\n        let e = Le.internals.dom.querySelectorAllArray(this.element, vt);\n        const t1 = Le.internals.dom.querySelectorAllArray(document.documentElement, 'input[type=\"radio\"]');\n        if (t1.length) {\n            const s = {};\n            for (const e of t1){\n                const t1 = e.getAttribute(\"name\");\n                void 0 === s[t1] && (s[t1] = new wt(t1)), s[t1].push(e);\n            }\n            e = e.filter((e)=>{\n                if (\"input\" !== e.tagName.toLowerCase() || \"radio\" !== e.getAttribute(\"type\").toLowerCase()) return !0;\n                const t1 = e.getAttribute(\"name\");\n                return s[t1].keep(e);\n            });\n        }\n        const s = Le.internals.dom.querySelectorAllArray(this.element, yt);\n        s.sort((e, t1)=>e.tabIndex - t1.tabIndex);\n        const i = e.filter((e)=>-1 === s.indexOf(e));\n        return s.concat(i).filter((e)=>\"-1\" !== e.tabIndex && Ct(e, this.element));\n    }\n    untrap() {\n        this.trapped && (this.isTrapping = !1, this.element.removeAttribute(\"aria-modal\"), window.removeEventListener(\"keydown\", this.handling), document.body.removeEventListener(\"focus\", this.focusing, !0), this.element = null, this.onUntrap && this.onUntrap());\n    }\n    dispose() {\n        this.untrap();\n    }\n    constructor(e, t1){\n        this.element = null, this.activeElement = null, this.onTrap = e, this.onUntrap = t1, this.waiting = this.wait.bind(this), this.handling = this.handle.bind(this), this.focusing = this.maintainFocus.bind(this), this.current = null;\n    }\n}\nclass Dt {\n    unstun() {\n        null === this.inert ? this.element.removeAttribute(\"inert\") : this.element.setAttribute(\"inert\", this.inert);\n    }\n    constructor(e){\n        this.element = e, this.inert = e.getAttribute(\"inert\"), this.element.setAttribute(\"inert\", \"\");\n    }\n}\nclass wt {\n    push(e) {\n        this.buttons.push(e), (e === document.activeElement || e.checked || void 0 === this.selected) && (this.selected = e);\n    }\n    keep(e) {\n        return this.selected === e;\n    }\n    constructor(e){\n        this.name = e, this.buttons = [];\n    }\n}\nclass Lt extends Le.core.DisclosuresGroup {\n    static get instanceClassName() {\n        return \"ModalsGroup\";\n    }\n    apply(e, t1) {\n        super.apply(e, t1), null === this.current ? this.focusTrap.untrap() : this.focusTrap.trap(this.current.node);\n    }\n    constructor(){\n        super(\"Modal\", !1), this.focusTrap = new Nt;\n    }\n}\nclass Rt extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"ModalBody\";\n    }\n    init() {\n        this.listen(\"scroll\", this.divide.bind(this));\n    }\n    activate() {\n        this.isResizing = !0, this.resize();\n    }\n    deactivate() {\n        this.isResizing = !1;\n    }\n    divide() {\n        this.node.scrollHeight > this.node.clientHeight ? this.node.offsetHeight + this.node.scrollTop >= this.node.scrollHeight ? this.removeClass(ft.SCROLL_DIVIDER) : this.addClass(ft.SCROLL_DIVIDER) : this.removeClass(ft.SCROLL_DIVIDER);\n    }\n    resize() {\n        this.adjust(), this.request(this.adjust.bind(this));\n    }\n    adjust() {\n        const e = 32 * (this.isBreakpoint(Le.core.Breakpoints.MD) ? 2 : 1);\n        this.isLegacy ? this.style.maxHeight = window.innerHeight - e + \"px\" : this.style.setProperty(\"--modal-max-height\", window.innerHeight - e + \"px\"), this.divide();\n    }\n}\nLe.modal = {\n    Modal: St,\n    ModalButton: At,\n    ModalBody: Rt,\n    ModalsGroup: Lt,\n    ModalSelector: ft\n}, Le.internals.register(Le.modal.ModalSelector.MODAL, Le.modal.Modal), Le.internals.register(Le.modal.ModalSelector.BODY, Le.modal.ModalBody), Le.internals.register(Le.core.RootSelector.ROOT, Le.modal.ModalsGroup);\nconst It = {\n    TOGGLE: Le.internals.ns.emission(\"password\", \"toggle\"),\n    ADJUST: Le.internals.ns.emission(\"password\", \"adjust\")\n};\nclass xt extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"PasswordToggle\";\n    }\n    init() {\n        this.listenClick(), this.ascend(It.ADJUST, this.width), this.isSwappingFont = !0, this._isChecked = this.isChecked;\n    }\n    get width() {\n        const e = getComputedStyle(this.node.parentNode);\n        return parseInt(e.width);\n    }\n    get isChecked() {\n        return this.node.checked;\n    }\n    set isChecked(e) {\n        this._isChecked = e, this.ascend(It.TOGGLE, e);\n    }\n    handleClick() {\n        this.isChecked = !this._isChecked;\n    }\n    swapFont(e) {\n        this.ascend(It.ADJUST, this.width);\n    }\n}\nclass Ot extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Password\";\n    }\n    init() {\n        this.addAscent(It.TOGGLE, this.toggle.bind(this)), this.addAscent(It.ADJUST, this.adjust.bind(this));\n    }\n    toggle(e) {\n        this.descend(It.TOGGLE, e);\n    }\n    adjust(e) {\n        this.descend(It.ADJUST, e);\n    }\n}\nconst Pt = {\n    PASSWORD: Le.internals.ns.selector(\"password\"),\n    INPUT: Le.internals.ns.selector(\"password__input\"),\n    LABEL: Le.internals.ns.selector(\"password__label\"),\n    TOOGLE: \"\".concat(Le.internals.ns.selector(\"password__checkbox\"), ' input[type=\"checkbox\"]')\n};\nclass kt extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"PasswordInput\";\n    }\n    init() {\n        this.addDescent(It.TOGGLE, this.toggle.bind(this)), this._isRevealed = \"password\" === this.hasAttribute(\"type\"), this.listen(\"keydown\", this.capslock.bind(this)), this.listen(\"keyup\", this.capslock.bind(this));\n    }\n    toggle(e) {\n        this.isRevealed = e, this.setAttribute(\"type\", e ? \"text\" : \"password\");\n    }\n    get isRevealed() {\n        return this._isRevealed;\n    }\n    capslock(e) {\n        e && \"function\" != typeof e.getModifierState || (e.getModifierState(\"CapsLock\") ? this.node.parentNode.setAttribute(Le.internals.ns.attr(\"capslock\"), \"\") : this.node.parentNode.removeAttribute(Le.internals.ns.attr(\"capslock\")));\n    }\n    set isRevealed(e) {\n        this._isRevealed = e, this.setAttribute(\"type\", e ? \"text\" : \"password\");\n    }\n}\nclass Mt extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"PasswordLabel\";\n    }\n    init() {\n        this.addDescent(It.ADJUST, this.adjust.bind(this));\n    }\n    adjust(e) {\n        const t1 = Math.ceil(e / 16);\n        this.node.style.paddingRight = t1 + \"rem\";\n    }\n}\nLe.password = {\n    Password: Ot,\n    PasswordToggle: xt,\n    PasswordSelector: Pt,\n    PasswordInput: kt,\n    PasswordLabel: Mt\n}, Le.internals.register(Le.password.PasswordSelector.INPUT, Le.password.PasswordInput), Le.internals.register(Le.password.PasswordSelector.PASSWORD, Le.password.Password), Le.internals.register(Le.password.PasswordSelector.TOOGLE, Le.password.PasswordToggle), Le.internals.register(Le.password.PasswordSelector.LABEL, Le.password.PasswordLabel);\nconst Gt = Le.internals.ns.selector(\"nav__item\"), $t = Le.internals.ns.selector(\"collapse\"), Ht = {\n    NAVIGATION: Le.internals.ns.selector(\"nav\"),\n    COLLAPSE: \"\".concat(Gt, \" > \").concat($t, \", \").concat(Gt, \" > *:not(\").concat(Gt, \"):not(\").concat($t, \") > \").concat($t, \", \").concat(Gt, \" > *:not(\").concat(Gt, \"):not(\").concat($t, \") > *:not(\").concat(Gt, \"):not(\").concat($t, \") > \").concat($t),\n    COLLAPSE_LEGACY: \"\".concat(Gt, \" \").concat($t),\n    ITEM: Gt,\n    ITEM_RIGHT: \"\".concat(Gt, \"--align-right\"),\n    MENU: Le.internals.ns.selector(\"menu\"),\n    BUTTON: Le.internals.ns.selector(\"nav__btn\"),\n    TRANSLATE_BUTTON: Le.internals.ns.selector(\"translate__btn\")\n};\nclass Ut extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"NavigationItem\";\n    }\n    init() {\n        this.addAscent(Le.core.DisclosureEmission.ADDED, this.calculate.bind(this)), this.addAscent(Le.core.DisclosureEmission.REMOVED, this.calculate.bind(this)), this.isResizing = !0, this.calculate();\n    }\n    resize() {\n        this.calculate();\n    }\n    calculate() {\n        const e = this.element.getDescendantInstances(Le.core.Collapse.instanceClassName, null, !0)[0];\n        if (e && this.isBreakpoint(Le.core.Breakpoints.LG) && e.element.node.matches(Ht.MENU)) {\n            const t1 = this.element.node.parentElement.getBoundingClientRect().right, s = e.element.node.getBoundingClientRect().width, i = this.element.node.getBoundingClientRect().left;\n            this.isRightAligned = i + s > t1;\n        } else this.isRightAligned = !1;\n    }\n    get isRightAligned() {\n        return this._isRightAligned;\n    }\n    set isRightAligned(e) {\n        this._isRightAligned !== e && (this._isRightAligned = e, e ? Le.internals.dom.addClass(this.element.node, Ht.ITEM_RIGHT) : Le.internals.dom.removeClass(this.element.node, Ht.ITEM_RIGHT));\n    }\n    get collapsePrimary() {\n        return this.element.children.map((e)=>e.getInstance(\"CollapseButton\")).filter((e)=>null !== e && (e.hasClass(Ht.BUTTON) || e.hasClass(Ht.TRANSLATE_BUTTON)))[0];\n    }\n    constructor(){\n        super(), this._isRightAligned = !1;\n    }\n}\nconst Bt = {\n    NONE: -1,\n    INSIDE: 0,\n    OUTSIDE: 1\n};\nclass Ft extends Le.core.CollapsesGroup {\n    static get instanceClassName() {\n        return \"Navigation\";\n    }\n    init() {\n        super.init(), this.clicked = !1, this.out = !1, this.addEmission(Le.core.RootEmission.CLICK, this._handleRootClick.bind(this)), this.listen(\"mousedown\", this.handleMouseDown.bind(this)), this.listenClick({\n            capture: !0\n        }), this.isResizing = !0;\n    }\n    validate(e) {\n        return super.validate(e) && e.element.node.matches(Le.internals.legacy.isLegacy ? Ht.COLLAPSE_LEGACY : Ht.COLLAPSE);\n    }\n    handleMouseDown(e) {\n        this.isBreakpoint(Le.core.Breakpoints.LG) && -1 !== this.index && this.current && (this.position = this.current.node.contains(e.target) ? Bt.INSIDE : Bt.OUTSIDE, this.requestPosition());\n    }\n    handleClick(e) {\n        !e.target.matches(\"a, button\") || e.target.matches(\"[aria-controls]\") || e.target.matches(Le.core.DisclosureSelector.PREVENT_CONCEAL) || (this.index = -1);\n    }\n    _handleRootClick(e) {\n        this.isBreakpoint(Le.core.Breakpoints.LG) && (this.node.contains(e) || (this.out = !0, this.requestPosition()));\n    }\n    requestPosition() {\n        this.isRequesting || (this.isRequesting = !0, this.request(this.getPosition.bind(this)));\n    }\n    getPosition() {\n        if (this.out) switch(this.position){\n            case Bt.OUTSIDE:\n                this.index = -1;\n                break;\n            case Bt.INSIDE:\n                this.current && !this.current.node.contains(document.activeElement) && this.current.focus();\n                break;\n            default:\n                this.index > -1 && !this.current.hasFocus && (this.index = -1);\n        }\n        this.request(this.requested.bind(this));\n    }\n    requested() {\n        this.position = Bt.NONE, this.out = !1, this.isRequesting = !1;\n    }\n    get index() {\n        return super.index;\n    }\n    set index(e) {\n        -1 === e && this.current && this.current.hasFocus && this.current.focus(), super.index = e;\n    }\n    get canUngroup() {\n        return !this.isBreakpoint(Le.core.Breakpoints.LG);\n    }\n    resize() {\n        this.update();\n    }\n}\nLe.navigation = {\n    Navigation: Ft,\n    NavigationItem: Ut,\n    NavigationMousePosition: Bt,\n    NavigationSelector: Ht\n}, Le.internals.register(Le.navigation.NavigationSelector.NAVIGATION, Le.navigation.Navigation), Le.internals.register(Le.navigation.NavigationSelector.ITEM, Le.navigation.NavigationItem);\nclass Wt extends Le.core.DisclosureButton {\n    static get instanceClassName() {\n        return \"TabButton\";\n    }\n    handleClick(e) {\n        super.handleClick(e), this.focus();\n    }\n    apply(e) {\n        super.apply(e), this.isPrimary && (this.setAttribute(\"tabindex\", e ? \"0\" : \"-1\"), e && this.list && this.list.focalize(this));\n    }\n    get list() {\n        return this.element.getAscendantInstance(\"TabsList\", \"TabsGroup\");\n    }\n    constructor(){\n        super(Le.core.DisclosureType.SELECT);\n    }\n}\nconst qt = {\n    TAB: Le.internals.ns.selector(\"tabs__tab\"),\n    GROUP: Le.internals.ns.selector(\"tabs\"),\n    PANEL: Le.internals.ns.selector(\"tabs__panel\"),\n    LIST: Le.internals.ns.selector(\"tabs__list\"),\n    SHADOW: Le.internals.ns.selector(\"tabs__shadow\"),\n    SHADOW_LEFT: Le.internals.ns.selector(\"tabs__shadow--left\"),\n    SHADOW_RIGHT: Le.internals.ns.selector(\"tabs__shadow--right\"),\n    PANEL_START: Le.internals.ns.selector(\"tabs__panel--direction-start\"),\n    PANEL_END: Le.internals.ns.selector(\"tabs__panel--direction-end\")\n}, zt = \"direction-start\", jt = \"direction-end\", Vt = \"none\";\nclass Kt extends Le.core.Disclosure {\n    static get instanceClassName() {\n        return \"TabPanel\";\n    }\n    get direction() {\n        return this._direction;\n    }\n    set direction(e) {\n        if (e !== this._direction) {\n            switch(this._direction){\n                case zt:\n                    this.removeClass(qt.PANEL_START);\n                    break;\n                case jt:\n                    this.removeClass(qt.PANEL_END);\n                    break;\n                case Vt:\n                    break;\n                default:\n                    return;\n            }\n            switch(this._direction = e, this._direction){\n                case zt:\n                    this.addClass(qt.PANEL_START);\n                    break;\n                case jt:\n                    this.addClass(qt.PANEL_END);\n            }\n        }\n    }\n    get isPreventingTransition() {\n        return this._isPreventingTransition;\n    }\n    set isPreventingTransition(e) {\n        this._isPreventingTransition !== e && (e ? this.addClass(Le.internals.motion.TransitionSelector.NONE) : this.removeClass(Le.internals.motion.TransitionSelector.NONE), this._isPreventingTransition = !0 === e);\n    }\n    translate(e, t1) {\n        this.isPreventingTransition = t1, this.direction = e;\n    }\n    reset() {\n        this.group && this.group.retrieve(!0);\n    }\n    _electPrimaries(e) {\n        return this.group && this.group.list ? super._electPrimaries(e).filter((e)=>this.group.list.node.contains(e.node)) : [];\n    }\n    constructor(){\n        super(Le.core.DisclosureType.SELECT, qt.PANEL, Wt, \"TabsGroup\"), this._direction = Vt, this._isPreventingTransition = !1;\n    }\n}\nconst Yt = \"tab_keys_left\", Xt = \"tab_keys_right\", Qt = \"tab_keys_home\", Jt = \"tab_keys_end\", Zt = {\n    PRESS_KEY: Le.internals.ns.emission(\"tab\", \"press_key\"),\n    LIST_HEIGHT: Le.internals.ns.emission(\"tab\", \"list_height\")\n};\nclass es extends Le.core.DisclosuresGroup {\n    static get instanceClassName() {\n        return \"TabsGroup\";\n    }\n    init() {\n        super.init(), this.listen(\"transitionend\", this.transitionend.bind(this)), this.addAscent(Zt.PRESS_KEY, this.pressKey.bind(this)), this.addAscent(Zt.LIST_HEIGHT, this.setListHeight.bind(this)), this.isRendering = !0;\n    }\n    getIndex() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        super.getIndex(e);\n    }\n    get list() {\n        return this.element.getDescendantInstances(\"TabsList\", \"TabsGroup\", !0)[0];\n    }\n    setListHeight(e) {\n        this.listHeight = e;\n    }\n    transitionend(e) {\n        this.isPreventingTransition = !0;\n    }\n    get buttonHasFocus() {\n        return this.members.some((e)=>e.buttonHasFocus);\n    }\n    pressKey(e) {\n        switch(e){\n            case Yt:\n                this.pressLeft();\n                break;\n            case Xt:\n                this.pressRight();\n                break;\n            case Qt:\n                this.pressHome();\n                break;\n            case Jt:\n                this.pressEnd();\n        }\n    }\n    pressRight() {\n        this.buttonHasFocus && (this.index < this.length - 1 ? this.index++ : this.index = 0, this.focus());\n    }\n    pressLeft() {\n        this.buttonHasFocus && (this.index > 0 ? this.index-- : this.index = this.length - 1, this.focus());\n    }\n    pressHome() {\n        this.buttonHasFocus && (this.index = 0, this.focus());\n    }\n    pressEnd() {\n        this.buttonHasFocus && (this.index = this.length - 1, this.focus());\n    }\n    focus() {\n        this.current && this.current.focus();\n    }\n    apply() {\n        for(let e = 0; e < this._index; e++)this.members[e].translate(zt);\n        this.current && this.current.translate(Vt);\n        for(let e = this._index + 1; e < this.length; e++)this.members[e].translate(jt);\n        this.isPreventingTransition = !1;\n    }\n    get isPreventingTransition() {\n        return this._isPreventingTransition;\n    }\n    set isPreventingTransition(e) {\n        this._isPreventingTransition !== e && (e ? this.addClass(Le.internals.motion.TransitionSelector.NONE) : this.removeClass(Le.internals.motion.TransitionSelector.NONE), this._isPreventingTransition = !0 === e);\n    }\n    render() {\n        if (null === this.current) return;\n        this.node.scrollTop = 0, this.node.scrollLeft = 0;\n        const e = Math.round(this.current.node.offsetHeight);\n        this.panelHeight !== e && (this.panelHeight = e, this.style.setProperty(\"--tabs-height\", this.panelHeight + this.listHeight + \"px\"));\n    }\n    constructor(){\n        super(\"TabPanel\");\n    }\n}\nclass ts extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"TabsList\";\n    }\n    init() {\n        this.listen(\"scroll\", this.scroll.bind(this)), this.listenKey(Le.core.KeyCodes.RIGHT, this.ascend.bind(this, Zt.PRESS_KEY, Xt), !0, !0), this.listenKey(Le.core.KeyCodes.LEFT, this.ascend.bind(this, Zt.PRESS_KEY, Yt), !0, !0), this.listenKey(Le.core.KeyCodes.HOME, this.ascend.bind(this, Zt.PRESS_KEY, Qt), !0, !0), this.listenKey(Le.core.KeyCodes.END, this.ascend.bind(this, Zt.PRESS_KEY, Jt), !0, !0), this.isResizing = !0;\n    }\n    focalize(e) {\n        const t1 = e.getRect(), s = this.getRect(), i = this.node.scrollLeft;\n        t1.left < s.left ? this.node.scrollTo(i - s.left + t1.left - 16, 0) : t1.right > s.right && this.node.scrollTo(i - s.right + t1.right + 16, 0);\n    }\n    get isScrolling() {\n        return this._isScrolling;\n    }\n    set isScrolling(e) {\n        this._isScrolling !== e && (this._isScrolling = e, this.apply());\n    }\n    apply() {\n        this._isScrolling ? (this.addClass(qt.SHADOW), this.scroll()) : (this.removeClass(qt.SHADOW_RIGHT), this.removeClass(qt.SHADOW_LEFT), this.removeClass(qt.SHADOW));\n    }\n    scroll() {\n        const e = this.node.scrollLeft, t1 = e <= 16, s = this.node.scrollWidth - this.node.clientWidth - 16, i = Math.abs(e) >= s, n = \"rtl\" === document.documentElement.getAttribute(\"dir\"), r = n ? qt.SHADOW_RIGHT : qt.SHADOW_LEFT, a = n ? qt.SHADOW_LEFT : qt.SHADOW_RIGHT;\n        t1 ? this.removeClass(r) : this.addClass(r), i ? this.removeClass(a) : this.addClass(a);\n    }\n    resize() {\n        this.isScrolling = this.node.scrollWidth > this.node.clientWidth + 16;\n        const e = this.getRect().height;\n        this.setProperty(\"--tabs-list-height\", \"\".concat(e, \"px\")), this.ascend(Zt.LIST_HEIGHT, e);\n    }\n    dispose() {\n        this.isScrolling = !1;\n    }\n}\nLe.tab = {\n    TabPanel: Kt,\n    TabButton: Wt,\n    TabsGroup: es,\n    TabsList: ts,\n    TabSelector: qt,\n    TabEmission: Zt\n}, Le.internals.register(Le.tab.TabSelector.PANEL, Le.tab.TabPanel), Le.internals.register(Le.tab.TabSelector.GROUP, Le.tab.TabsGroup), Le.internals.register(Le.tab.TabSelector.LIST, Le.tab.TabsList);\nconst ss = {\n    SCROLLABLE: Le.internals.ns.emission(\"table\", \"scrollable\"),\n    CHANGE: Le.internals.ns.emission(\"table\", \"change\"),\n    CAPTION_HEIGHT: Le.internals.ns.emission(\"table\", \"captionheight\")\n};\nclass is extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Table\";\n    }\n    init() {\n        this.addAscent(ss.CAPTION_HEIGHT, this.setCaptionHeight.bind(this));\n    }\n    setCaptionHeight(e) {\n        this.setProperty(\"--table-offset\", \"calc(\".concat(e, \"px + 1rem)\"));\n    }\n}\nconst ns = {\n    TABLE: Le.internals.ns.selector(\"table\"),\n    SHADOW: Le.internals.ns.selector(\"table__shadow\"),\n    SHADOW_LEFT: Le.internals.ns.selector(\"table__shadow--left\"),\n    SHADOW_RIGHT: Le.internals.ns.selector(\"table__shadow--right\"),\n    ELEMENT: \"\".concat(Le.internals.ns.selector(\"table\"), \":not(\").concat(Le.internals.ns.selector(\"table--no-scroll\"), \") table\"),\n    CAPTION: \"\".concat(Le.internals.ns.selector(\"table\"), \" table caption\")\n};\nclass rs extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"TableElement\";\n    }\n    init() {\n        this.listen(\"scroll\", this.scroll.bind(this)), this.content = this.querySelector(\"tbody\"), this.isResizing = !0;\n    }\n    get isScrolling() {\n        return this._isScrolling;\n    }\n    set isScrolling(e) {\n        this._isScrolling !== e && (this._isScrolling = e, e ? (this.addClass(ns.SHADOW), this.scroll()) : (this.removeClass(ns.SHADOW), this.removeClass(ns.SHADOW_LEFT), this.removeClass(ns.SHADOW_RIGHT)));\n    }\n    scroll() {\n        const e = this.node.scrollLeft <= 8, t1 = this.content.offsetWidth - this.node.offsetWidth - 8, s = Math.abs(this.node.scrollLeft) >= t1, i = \"rtl\" === document.documentElement.getAttribute(\"dir\"), n = i ? ns.SHADOW_RIGHT : ns.SHADOW_LEFT, r = i ? ns.SHADOW_LEFT : ns.SHADOW_RIGHT;\n        e ? this.removeClass(n) : this.addClass(n), s ? this.removeClass(r) : this.addClass(r);\n    }\n    resize() {\n        this.isScrolling = this.content.offsetWidth > this.node.offsetWidth;\n    }\n    dispose() {\n        this.isScrolling = !1;\n    }\n}\nclass as extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"TableCaption\";\n    }\n    init() {\n        this.height = 0, this.isResizing = !0;\n    }\n    resize() {\n        const e = this.getRect().height;\n        this.height !== e && (this.height = e, this.ascend(ss.CAPTION_HEIGHT, e));\n    }\n}\nLe.table = {\n    Table: is,\n    TableElement: rs,\n    TableCaption: as,\n    TableSelector: ns\n}, Le.internals.register(Le.table.TableSelector.TABLE, Le.table.Table), Le.internals.register(Le.table.TableSelector.ELEMENT, Le.table.TableElement), Le.internals.register(Le.table.TableSelector.CAPTION, Le.table.TableCaption);\nconst os = {\n    DISMISS: Le.internals.ns.event(\"dismiss\")\n};\nclass hs extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"TagDismissible\";\n    }\n    init() {\n        this.listenClick();\n    }\n    handleClick() {\n        switch(this.focusClosest(), Le.mode){\n            case Le.Modes.ANGULAR:\n            case Le.Modes.REACT:\n            case Le.Modes.VUE:\n                this.request(this.verify.bind(this));\n                break;\n            default:\n                this.remove();\n        }\n        this.dispatch(os.DISMISS);\n    }\n    verify() {\n        document.body.contains(this.node) && this.warn(\"a TagDismissible has just been dismissed and should be removed from the dom. In \".concat(Le.mode, \" mode, the api doesn't handle dom modification. An event \").concat(os.DISMISS, \" is dispatched by the element to trigger the removal\"));\n    }\n}\nconst cs = {\n    PRESSABLE: \"\".concat(Le.internals.ns.selector(\"tag\"), \"[aria-pressed]\"),\n    DISMISSIBLE: \"\".concat(Le.internals.ns.selector(\"tag--dismiss\"))\n};\nLe.tag = {\n    TagDismissible: hs,\n    TagSelector: cs,\n    TagEvent: os\n}, Le.internals.register(Le.tag.TagSelector.PRESSABLE, Le.core.Toggle), Le.internals.register(Le.tag.TagSelector.DISMISSIBLE, Le.tag.TagDismissible);\nconst ls = Le.internals.ns.selector(\"transcription\"), ds = {\n    TRANSCRIPTION: ls,\n    BUTTON: \"\".concat(ls, \"__btn\")\n};\nclass us extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Transcription\";\n    }\n    get collapsePrimary() {\n        return this.element.children.map((e)=>e.getInstance(\"CollapseButton\")).filter((e)=>null !== e && e.hasClass(ds.BUTTON))[0];\n    }\n}\nLe.transcription = {\n    Transcription: us,\n    TranscriptionSelector: ds\n}, Le.internals.register(Le.transcription.TranscriptionSelector.TRANSCRIPTION, Le.transcription.Transcription);\nclass gs extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"TileDownload\";\n    }\n    init() {\n        this.addAscent(Le.core.AssessEmission.UPDATE, (e)=>{\n            this.descend(Le.core.AssessEmission.UPDATE, e);\n        }), this.addAscent(Le.core.AssessEmission.ADDED, ()=>{\n            this.descend(Le.core.AssessEmission.ADDED);\n        });\n    }\n}\nconst ps = {\n    DOWNLOAD: Le.internals.ns.selector(\"tile--download\"),\n    DOWNLOAD_DETAIL: \"\".concat(Le.internals.ns.selector(\"tile--download\"), \" \").concat(Le.internals.ns.selector(\"tile__detail\"))\n};\nLe.tile = {\n    TileSelector: ps,\n    TileDownload: gs\n}, Le.internals.register(Le.tile.TileSelector.DOWNLOAD, Le.tile.TileDownload), Le.internals.register(Le.tile.TileSelector.DOWNLOAD_DETAIL, Le.core.AssessDetail);\nconst ms = {\n    RANGE: Le.internals.ns.selector(\"range\"),\n    RANGE_SM: Le.internals.ns.selector(\"range--sm\"),\n    RANGE_STEP: Le.internals.ns.selector(\"range--step\"),\n    RANGE_DOUBLE: Le.internals.ns.selector(\"range--double\"),\n    RANGE_DOUBLE_STEP: Le.internals.ns.selector(\"range--double\") + Le.internals.ns.selector(\"range--step\"),\n    RANGE_INPUT: Le.internals.ns.selector(\"range input[type=range]:nth-of-type(1)\"),\n    RANGE_INPUT2: \"\".concat(Le.internals.ns.selector(\"range--double\"), \" input[type=range]:nth-of-type(2)\"),\n    RANGE_OUTPUT: Le.internals.ns.selector(\"range__output\"),\n    RANGE_MIN: Le.internals.ns.selector(\"range__min\"),\n    RANGE_MAX: Le.internals.ns.selector(\"range__max\"),\n    RANGE_PREFIX: Le.internals.ns.attr(\"prefix\"),\n    RANGE_SUFFIX: Le.internals.ns.attr(\"suffix\")\n}, _s = {\n    VALUE: Le.internals.ns.emission(\"range\", \"value\"),\n    VALUE2: Le.internals.ns.emission(\"range\", \"value2\"),\n    OUTPUT: Le.internals.ns.emission(\"range\", \"output\"),\n    CONSTRAINTS: Le.internals.ns.emission(\"range\", \"constraints\"),\n    MIN: Le.internals.ns.emission(\"range\", \"min\"),\n    MAX: Le.internals.ns.emission(\"range\", \"max\"),\n    STEP: Le.internals.ns.emission(\"range\", \"step\"),\n    PREFIX: Le.internals.ns.emission(\"range\", \"prefix\"),\n    SUFFIX: Le.internals.ns.emission(\"range\", \"suffix\"),\n    DISABLED: Le.internals.ns.emission(\"range\", \"disabled\"),\n    ENABLE_POINTER: Le.internals.ns.emission(\"range\", \"enable_pointer\")\n};\nclass bs {\n    configure(e) {\n        e && (this._prefix = e._prefix, this._suffix = e._suffix, this._width = e.width, this.setConstraints(e._constraints), this.value = e.value, this.update());\n    }\n    setPrefix(e) {\n        this._prefix = null !== e ? e : \"\";\n    }\n    setSuffix(e) {\n        this._suffix = null !== e ? e : \"\";\n    }\n    _decorate(e) {\n        return \"\".concat(this._prefix).concat(e).concat(this._suffix);\n    }\n    get width() {\n        return this._width;\n    }\n    set width(e) {\n        this._width = e;\n    }\n    get isSm() {\n        return this._isSm;\n    }\n    set isSm(e) {\n        this._isSm !== e && (this._isSm = e, this.setThumbSize(e ? 16 : 24), this.update());\n    }\n    setThumbSize(e) {\n        let t1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        this._thumbSize = e, this._innerPadding = e * t1;\n    }\n    get textValue() {\n        return this._decorate(this._value);\n    }\n    get value() {\n        return this._value;\n    }\n    set value(e) {\n        this._value = e;\n    }\n    get outputX() {\n        return this._outputX;\n    }\n    setConstraints(e) {\n        this._constraints = e, this._min = e.min, this._max = e.max, this._step = e.step, this._rangeWidth = e.rangeWidth;\n    }\n    get min() {\n        return this._min;\n    }\n    get textMin() {\n        return this._decorate(this._min);\n    }\n    get max() {\n        return this._max;\n    }\n    get textMax() {\n        return this._decorate(this._max);\n    }\n    get step() {\n        return this._step;\n    }\n    get output() {\n        return {\n            text: this.textValue,\n            transform: \"translateX(\".concat(this._translateX, \"px) translateX(-\").concat(this._centerPercent, \"%)\")\n        };\n    }\n    _getRatio(e) {\n        return (e - this._min) / this._rangeWidth;\n    }\n    get progress() {\n        return this._progress;\n    }\n    update() {\n        this._update();\n    }\n    _update() {\n        this._innerWidth = this._width - this._innerPadding;\n        const e = this._getRatio(this._value);\n        this._translateX = e * this._width, this._centerPercent = 100 * e, this._progress = {\n            right: \"\".concat((this._innerWidth * e + .5 * this._innerPadding).toFixed(2), \"px\")\n        };\n    }\n    constructor(){\n        this._width = 0, this._min = 0, this._max = 0, this._value = 0, this._thumbSize = 24, this._innerWidth = 0, this._prefix = \"\", this._suffix = \"\", this._background = {};\n    }\n}\nclass Es extends bs {\n    get stepWidth() {\n        return \"\".concat(this._stepWidth.toFixed(3), \"px\");\n    }\n    _update() {\n        super._update();\n        const e = this._rangeWidth / this._step;\n        for(this._stepWidth = this._innerWidth / e; this._stepWidth < 4;)this._stepWidth *= 2;\n    }\n}\nclass fs extends bs {\n    get value2() {\n        return this._value;\n    }\n    set value2(e) {\n        this._value2 !== e && (this._value2 = e, this.update());\n    }\n    get textValue() {\n        return \"\".concat(this._decorate(this._value), \" - \").concat(this._decorate(this._value2));\n    }\n    setThumbSize(e) {\n        super.setThumbSize(e, 2);\n    }\n    _update() {\n        super._update();\n        const e = this._getRatio(.5 * (this._value + this._value2));\n        this._translateX = e * this._width, this._centerPercent = 100 * e;\n        const t1 = this._getRatio(this._value), s = this._getRatio(this._value2);\n        this._progress = {\n            left: \"\".concat((this._innerWidth * t1 + .25 * this._innerPadding).toFixed(2), \"px\"),\n            right: \"\".concat((this._innerWidth * s + .75 * this._innerPadding).toFixed(2), \"px\")\n        };\n    }\n}\nclass As extends fs {\n    get stepWidth() {\n        return \"\".concat(this._stepWidth.toFixed(3), \"px\");\n    }\n    _update() {\n        super._update();\n        const e = this._rangeWidth / this._step;\n        this._stepWidth = this._innerWidth / e, this._stepWidth < 4 && (this._stepWidth *= Math.ceil(4 / this._stepWidth));\n    }\n}\nconst Ts = \"step\", Ss = \"double\", vs = \"double-step\", ys = \"default\";\nclass Cs extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Range\";\n    }\n    init() {\n        this._retrieveType(), this._retrieveSize(), this.isLegacy ? (this.isResizing = !0, this.isMouseMoving = !0) : (this._observer = new ResizeObserver(this.resize.bind(this)), this._observer.observe(this.node)), this.addAscent(_s.CONSTRAINTS, this.setConstraints.bind(this)), this.addAscent(_s.VALUE, this.setValue.bind(this)), this.addAscent(_s.VALUE2, this.setValue2.bind(this)), this.getAttribute(ms.RANGE_PREFIX) && this.setPrefix(this.getAttribute(ms.RANGE_PREFIX)), this.getAttribute(ms.RANGE_SUFFIX) && this.setSuffix(this.getAttribute(ms.RANGE_SUFFIX)), this.update();\n    }\n    _retrieveType() {\n        switch(!0){\n            case this.matches(ms.RANGE_DOUBLE_STEP):\n            case this.matches(ms.RANGE_DOUBLE):\n                this.type = Ss;\n                break;\n            case this.matches(ms.RANGE_STEP):\n                this.type = Ts;\n                break;\n            default:\n                this.type = ys;\n        }\n    }\n    set type(e) {\n        if (this._type === e) return;\n        this._type = e;\n        const t1 = this._model;\n        switch(this._type){\n            case vs:\n                this._model = new As;\n                break;\n            case Ss:\n                this._model = new fs;\n                break;\n            case Ts:\n                this._model = new Es;\n                break;\n            default:\n                this._model = new bs;\n        }\n        this._model.configure(t1);\n    }\n    get type() {\n        return this._type;\n    }\n    _retrieveSize() {\n        this._model.isSm = this.matches(ms.RANGE_SM);\n    }\n    resize() {\n        this._retrieveWidth(), this.update();\n    }\n    _retrieveWidth() {\n        this._model.width = this.getRect().width;\n    }\n    setValue(e) {\n        switch(this._model.value = e, this._type){\n            case vs:\n            case Ss:\n                this.descend(_s.VALUE, e);\n        }\n        this.update();\n    }\n    setValue2(e) {\n        this._model.value2 = e, this.descend(_s.VALUE2, e), this.update();\n    }\n    setConstraints(e) {\n        this._model.setConstraints(e), this.update(), this.descend(_s.CONSTRAINTS, e);\n    }\n    setPrefix(e) {\n        this._model.setPrefix(e), this.update();\n    }\n    setSuffix(e) {\n        this._model.setSuffix(e), this.update();\n    }\n    mutate(e) {\n        switch(!0){\n            case e.includes(\"class\"):\n                this._retrieveType(), this._retrieveSize();\n                break;\n            case e.includes(ms.RANGE_PREFIX):\n            case e.includes(ms.RANGE_SUFFIX):\n                this._model.setPrefix(this.getAttribute(ms.RANGE_PREFIX)), this._model.setSuffix(this.getAttribute(ms.RANGE_SUFFIX)), this.update();\n        }\n    }\n    update() {\n        this._model.update(), this.descend(_s.OUTPUT, this._model.output), this.descend(_s.MIN, this._model.textMin), this.descend(_s.MAX, this._model.textMax);\n        const e = this._model.progress;\n        e.left ? this.style.setProperty(\"--progress-left\", e.left) : this.style.removeProperty(\"--progress-left\"), e.right ? (this.style.setProperty(\"--progress-right\", e.right), this.isLegacy && e.left && (this.style.setProperty(\"background-position-x\", e.left), this.style.setProperty(\"background-size\", \"\".concat(parseFloat(e.right) - parseFloat(e.left), \"px \").concat(this._model.isSm ? \"8px\" : \"12px\")))) : (this.style.removeProperty(\"--progress-right\"), this.isLegacy && (this.style.removeProperty(\"background-size\"), this.style.removeProperty(\"background-position-x\"))), this._model.stepWidth ? this.style.setProperty(\"--step-width\", this._model.stepWidth) : this.style.removeProperty(\"--step-width\");\n    }\n    mouseMove(e) {\n        if (this._type !== Ss && this._type !== vs) return;\n        const t1 = e.x - this.getRect().left;\n        this.descend(_s.ENABLE_POINTER, (parseFloat(this._model.progress.right) - parseFloat(this._model.progress.left)) / 2 + parseFloat(this._model.progress.left) < t1 ? 2 : 1);\n    }\n    dispose() {\n        this._observer.disconnect();\n    }\n}\nclass Ns {\n    get min() {\n        return this._min;\n    }\n    get max() {\n        return this._max;\n    }\n    get step() {\n        return this._step;\n    }\n    get rangeWidth() {\n        return this._rangeWidth;\n    }\n    test(e, t1, s) {\n        return this._min === e && this._max === t1 && this._step === s;\n    }\n    constructor(e){\n        this._min = isNaN(e.min) ? 0 : e.min, this._max = isNaN(e.max) ? 100 : e.max, this._step = isNaN(e.step) ? 1 : e.step, this._rangeWidth = this._max - this._min;\n    }\n}\nclass Ds extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"RangeInput\";\n    }\n    init() {\n        this._init(), this.node.value = this.getAttribute(\"value\"), this._changing = this.change.bind(this), this._listenerType = this.isLegacy ? \"change\" : \"input\", this.listen(this._listenerType, this._changing), this.isLegacy && this.addDescent(_s.ENABLE_POINTER, this._enablePointer.bind(this)), this.change();\n    }\n    _init() {\n        this._pointerId = 1, this.request(()=>{\n            this.hasAttribute(\"min\") || this.setAttribute(\"min\", 0), this.ascend(_s.CONSTRAINTS, new Ns(this.node)), this.ascend(_s.DISABLED, this.node.disabled);\n        }), this.addDescent(_s.VALUE2, this.setValue.bind(this));\n    }\n    _enablePointer(e) {\n        const t1 = e === this._pointerId;\n        this._isPointerEnabled !== t1 && (this._isPointerEnabled = t1, t1 ? this.style.removeProperty(\"pointer-events\") : this.style.setProperty(\"pointer-events\", \"none\"));\n    }\n    setValue(e) {\n        parseFloat(this.node.value) > e && (this.node.value = e, this.change());\n    }\n    change() {\n        this.ascend(_s.VALUE, parseFloat(this.node.value));\n    }\n    mutate(e) {\n        e.includes(\"disabled\") && this.ascend(_s.DISABLED, this.node.disabled), (e.includes(\"min\") || e.includes(\"max\") || e.includes(\"step\")) && (this.ascend(_s.CONSTRAINTS, new Ns(this.node)), this.change());\n    }\n    dispose() {\n        this._listenerType && this.unlisten(this._listenerType, this._changing);\n    }\n}\nclass ws extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"RangeOutput\";\n    }\n    init() {\n        this.addDescent(_s.OUTPUT, this.change.bind(this));\n    }\n    change(e) {\n        this.node.innerText = e.text, this.node.style.transform = e.transform;\n    }\n}\nclass Ls extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"RangeLimit\";\n    }\n    init() {\n        switch(!0){\n            case this.matches(ms.RANGE_MIN):\n                this.addDescent(_s.MIN, this.change.bind(this));\n                break;\n            case this.matches(ms.RANGE_MAX):\n                this.addDescent(_s.MAX, this.change.bind(this));\n        }\n    }\n    change(e) {\n        this.node.innerText = e;\n    }\n}\nLe.range = {\n    Range: Cs,\n    RangeInput: Ds,\n    RangeInput2: class extends Ds {\n        static get instanceClassName() {\n            return \"RangeInput2\";\n        }\n        _init() {\n            this._pointerId = 2, this.addDescent(_s.CONSTRAINTS, this.setConstraints.bind(this)), this.addDescent(_s.VALUE, this.setValue.bind(this));\n        }\n        setValue(e) {\n            parseFloat(this.node.value) < e && (this.node.value = e, this.change());\n        }\n        change() {\n            this.ascend(_s.VALUE2, parseFloat(this.node.value));\n        }\n        setConstraints(e) {\n            this.node.min = e.min, this.node.max = e.max, this.node.step = e.step, this.change();\n        }\n        mutate(e) {}\n    },\n    RangeOutput: ws,\n    RangeLimit: Ls,\n    RangeEmission: _s,\n    RangeSelector: ms\n}, Le.internals.register(Le.range.RangeSelector.RANGE, Le.range.Range), Le.internals.register(Le.range.RangeSelector.RANGE_INPUT, Le.range.RangeInput), Le.internals.register(Le.range.RangeSelector.RANGE_INPUT2, Le.range.RangeInput2), Le.internals.register(Le.range.RangeSelector.RANGE_OUTPUT, Le.range.RangeOutput), Le.internals.register(Le.range.RangeSelector.RANGE_MIN, Le.range.RangeLimit), Le.internals.register(Le.range.RangeSelector.RANGE_MAX, Le.range.RangeLimit);\nconst Rs = {\n    HEADER: Le.internals.ns.selector(\"header\"),\n    TOOLS_LINKS: Le.internals.ns.selector(\"header__tools-links\"),\n    MENU_LINKS: Le.internals.ns.selector(\"header__menu-links\"),\n    BUTTONS: \"\".concat(Le.internals.ns.selector(\"header__tools-links\"), \" \").concat(Le.internals.ns.selector(\"btns-group\"), \", \").concat(Le.internals.ns.selector(\"header__tools-links\"), \" \").concat(Le.internals.ns.selector(\"links-group\")),\n    MODALS: \"\".concat(Le.internals.ns.selector(\"header__search\")).concat(Le.internals.ns.selector(\"modal\"), \", \").concat(Le.internals.ns.selector(\"header__menu\")).concat(Le.internals.ns.selector(\"modal\"))\n};\nclass Is extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"HeaderLinks\";\n    }\n    init() {\n        const e = this.queryParentSelector(Rs.HEADER);\n        this.toolsLinks = e.querySelector(Rs.TOOLS_LINKS), this.menuLinks = e.querySelector(Rs.MENU_LINKS);\n        const t1 = \"-mobile\", s = this.toolsLinks.innerHTML.replace(/  +/g, \" \"), i = this.menuLinks.innerHTML.replace(/  +/g, \" \");\n        let n = s.match(/id=\"(.*?)\"/gm) || [];\n        n = n.map((e)=>e.replace('id=\"', \"\").replace('\"', \"\"));\n        const r = s.match(/aria-controls=\"(.*?)\"/gm);\n        let a = s.replace(/id=\"(.*?)\"/gm, 'id=\"$1' + t1 + '\"');\n        if (r) for (const e of r){\n            const s = e.replace('aria-controls=\"', \"\").replace('\"', \"\");\n            n.includes(s) && (a = a.replace('aria-controls=\"'.concat(s, '\"'), 'aria-controls=\"'.concat(s + t1, '\"')));\n        }\n        if (a !== i) switch(Le.mode){\n            case Le.Modes.ANGULAR:\n            case Le.Modes.REACT:\n            case Le.Modes.VUE:\n                this.warn(\"header__tools-links content is different from header__menu-links content.\\nAs you're using a dynamic framework, you should handle duplication of this content yourself, please refer to documentation:\\n\".concat(Le.header.doc));\n                break;\n            default:\n                this.menuLinks.innerHTML = a;\n        }\n    }\n}\nclass xs extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"HeaderModal\";\n    }\n    init() {\n        this.isResizing = !0;\n    }\n    resize() {\n        this.isBreakpoint(Le.core.Breakpoints.LG) ? this.deactivateModal() : this.activateModal();\n    }\n    activateModal() {\n        const e = this.element.getInstance(\"Modal\");\n        e && (e.isEnabled = !0, this.listenClick({\n            capture: !0\n        }));\n    }\n    deactivateModal() {\n        const e = this.element.getInstance(\"Modal\");\n        e && (e.conceal(), e.isEnabled = !1, this.unlistenClick({\n            capture: !0\n        }));\n    }\n    handleClick(e) {\n        if (e.target.matches(\"a, button\") && !e.target.matches(\"[aria-controls]\") && !e.target.matches(Le.core.DisclosureSelector.PREVENT_CONCEAL)) {\n            this.element.getInstance(\"Modal\").conceal();\n        }\n    }\n}\nLe.header = {\n    HeaderLinks: Is,\n    HeaderModal: xs,\n    HeaderSelector: Rs,\n    doc: \"https://www.systeme-de-design.gouv.fr/elements-d-interface/composants/en-tete\"\n}, Le.internals.register(Le.header.HeaderSelector.TOOLS_LINKS, Le.header.HeaderLinks), Le.internals.register(Le.header.HeaderSelector.MODALS, Le.header.HeaderModal);\nconst Os = {\n    DISPLAY: Le.internals.ns.selector(\"display\"),\n    RADIO_BUTTONS: 'input[name=\"'.concat(Le.internals.ns(\"radios-theme\"), '\"]'),\n    FIELDSET: Le.internals.ns.selector(\"fieldset\")\n};\nclass Ps extends Le.core.Instance {\n    static get instanceClassName() {\n        return \"Display\";\n    }\n    init() {\n        if (this.radios = this.querySelectorAll(Os.RADIO_BUTTONS), Le.scheme) {\n            this.changing = this.change.bind(this);\n            for (const e of this.radios)e.addEventListener(\"change\", this.changing);\n            this.addDescent(Le.scheme.SchemeEmission.SCHEME, this.apply.bind(this)), this.ascend(Le.scheme.SchemeEmission.ASK);\n        } else this.querySelector(Os.FIELDSET).setAttribute(\"disabled\", \"\");\n    }\n    get scheme() {\n        return this._scheme;\n    }\n    set scheme(e) {\n        if (this._scheme !== e && Le.scheme) switch(e){\n            case Le.scheme.SchemeValue.SYSTEM:\n            case Le.scheme.SchemeValue.LIGHT:\n            case Le.scheme.SchemeValue.DARK:\n                this._scheme = e;\n                for (const t1 of this.radios)t1.checked = t1.value === e;\n                this.ascend(Le.scheme.SchemeEmission.SCHEME, e);\n        }\n    }\n    change() {\n        for (const e of this.radios)if (e.checked) return void (this.scheme = e.value);\n    }\n    apply(e) {\n        this.scheme = e;\n    }\n    dispose() {\n        for (const e of this.radios)e.removeEventListener(\"change\", this.changing);\n    }\n}\nLe.display = {\n    Display: Ps,\n    DisplaySelector: Os\n}, Le.internals.register(Le.display.DisplaySelector.DISPLAY, Le.display.Display); //# sourceMappingURL=dsfr.module.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@codegouvfr/react-dsfr/dsfr/dsfr.module.min.js\n"));

/***/ })

}]);