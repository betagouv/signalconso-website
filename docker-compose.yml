##### CANCELED ###############
## I setup'd this Docker stuff for Windows for Guillaume R
## But it turns out that Docker is actually extremely slow on windows
## (unless maybe using WSL, which seems really complex)
## I'm commiting this just for safekeeping in git history, just in case
##############################

# This docker-compose.yml, along with the Dockerfile,
# is designed to make a build of the website,
# so that Guillaume R can launch it on his machine
# to work on the YAML more easily.
#
# It can be launched with this command :
# docker-compose up --build
# Guillaume R will just use the "LAUNCH_ON_WINDOWS.bat" script which does this same command.
#
# This should rebuild everything from his current version of the source code,
# and starts the website on localhost:3001.
# Then he can do modifications on the YAML files.
# Changes to the YAML files should automatically be repercuted in the website after a few seconds.
# If the YAML is invalid, he should see an error message in the output of the command.

version: '3.8'

services:
  # This container is the website, launched with yarn dev
  website:
    container_name: website
    # will build the image from ./Dockerfile
    build:
      context: .
    ports:
      - '3001:3001'
    volumes:
      # sync the YAML/JSON between local <-> Docker
      - ./src/anomalies:/myapp/src/anomalies

  # This container is based on the same image
  # But we use it just to watch the YML and transform it into JSON

  yaml_watcher:
    container_name: yaml_watcher
    build:
      context: .
    volumes:
      - ./src/anomalies:/myapp/src/anomalies
    # Override the default command, don't launch the website and do this instead
    entrypoint: yarn generate-json-watch

  # So this is what happens when we edit the YML files :
  # - We edit the YML files locally
  # - Changes are synced automatically into the "watcher" container
  # - The watcher container automatically processes the YAML and generates JSON
  # - Changes to the JSON are synced automatically locally, and thus also synced with the "website" container
  # - The website container detects the JSON changes (thanks to the hot reload baked in "next dev"), and the website is refreshed
